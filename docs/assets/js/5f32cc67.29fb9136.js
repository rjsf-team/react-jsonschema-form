"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[7178],{1184:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var t=i(4041);const o={},s=t.createContext(o);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},4387:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/OptionalDataControlsAdd-628f9c11838f61b2ad5218392b0567c3.png"},7055:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"api-reference/uiSchema","title":"uiSchema","description":"JSON Schema is limited for describing how a given data type should be rendered as a form input component. That\'s why this library introduces the concept of uiSchema.","source":"@site/docs/api-reference/uiSchema.md","sourceDirName":"api-reference","slug":"/api-reference/uiSchema","permalink":"/react-jsonschema-form/docs/api-reference/uiSchema","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/api-reference/uiSchema.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Semantic-UI Customization","permalink":"/react-jsonschema-form/docs/api-reference/themes/semantic-ui/uiSchema"},"next":{"title":"RJSF utility functions, constants and types","permalink":"/react-jsonschema-form/docs/api-reference/utility-functions"}}');var o=i(1085),s=i(1184);const a={},r="uiSchema",l={},c=[{value:"Exceptions to the equivalence",id:"exceptions-to-the-equivalence",level:2},{value:"ui",id:"ui",level:3},{value:"ui (deprecated)",id:"ui-deprecated",level:3},{value:"ui",id:"ui-1",level:3},{value:"ui",id:"ui-2",level:3},{value:"ui",id:"ui-3",level:3},{value:"ui or ui.XXX",id:"ui-or-uixxx",level:2},{value:"widget",id:"widget",level:3},{value:"classNames",id:"classnames",level:3},{value:"style",id:"style",level:3},{value:"autocomplete",id:"autocomplete",level:3},{value:"autofocus",id:"autofocus",level:3},{value:"description",id:"description",level:3},{value:"disabled",id:"disabled",level:3},{value:"enableMarkdownInDescription",id:"enablemarkdownindescription",level:3},{value:"enableOptionalDataFieldForType",id:"enableoptionaldatafieldfortype",level:3},{value:"Add Optional Data Controls",id:"add-optional-data-controls",level:4},{value:"Remove Optional Data Controls",id:"remove-optional-data-controls",level:4},{value:"emptyValue",id:"emptyvalue",level:3},{value:"enumDisabled",id:"enumdisabled",level:3},{value:"enumNames",id:"enumnames",level:3},{value:"filePreview",id:"filepreview",level:3},{value:"help",id:"help",level:3},{value:"hideError",id:"hideerror",level:3},{value:"inputType",id:"inputtype",level:3},{value:"label",id:"label",level:3},{value:"order",id:"order",level:3},{value:"placeholder",id:"placeholder",level:3},{value:"readonly",id:"readonly",level:3},{value:"rows",id:"rows",level:3},{value:"title",id:"title",level:3},{value:"submitButtonOptions",id:"submitbuttonoptions",level:3},{value:"<code>norender</code> option",id:"norender-option",level:4},{value:"<code>submitText</code> option",id:"submittext-option",level:4},{value:"<code>props</code> section",id:"props-section",level:4},{value:"<code>disabled</code> prop",id:"disabled-prop",level:5},{value:"<code>className</code> prop",id:"classname-prop",level:5},{value:"<code>duplicateKeySuffixSeparator</code> option",id:"duplicatekeysuffixseparator-option",level:2},{value:"Using uiSchema with oneOf, anyOf",id:"using-uischema-with-oneof-anyof",level:2},{value:"anyOf",id:"anyof",level:3},{value:"oneOf",id:"oneof",level:3},{value:"Theme Options",id:"theme-options",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"uischema",children:"uiSchema"})}),"\n",(0,o.jsx)(n.p,{children:"JSON Schema is limited for describing how a given data type should be rendered as a form input component. That's why this library introduces the concept of uiSchema."}),"\n",(0,o.jsxs)(n.p,{children:["A UI schema is basically an object literal providing information on ",(0,o.jsx)(n.strong,{children:"how"})," the form should be rendered, while the JSON schema tells ",(0,o.jsx)(n.strong,{children:"what"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"The uiSchema object follows the tree structure of the form field hierarchy, and defines how each property should be rendered."}),"\n",(0,o.jsxs)(n.p,{children:["Note that almost every property within uiSchema can be rendered in one of two ways: ",(0,o.jsx)(n.code,{children:'{"ui:options": {[property]: [value]}}'}),", or ",(0,o.jsx)(n.code,{children:'{"ui:[property]": value}'}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["In other words, the following ",(0,o.jsx)(n.code,{children:"uiSchema"}),"s are equivalent:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "ui:title": "Title",\n  "ui:description": "Description",\n  "ui:classNames": "my-class",\n  "ui:submitButtonOptions": {\n    "props": {\n      "disabled": false,\n      "className": "btn btn-info"\n    },\n    "norender": false,\n    "submitText": "Submit"\n  }\n}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "ui:options": {\n    "title": "Title",\n    "description": "Description",\n    "classNames": "my-class",\n    "submitButtonOptions": {\n      "props": {\n        "disabled": false,\n        "className": "btn btn-info"\n      },\n      "norender": false,\n      "submitText": "Submit"\n    }\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For a full list of what is supported in the ",(0,o.jsx)(n.code,{children:"uiSchema"})," see the ",(0,o.jsx)(n.code,{children:"UiSchema"})," type in ",(0,o.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/blob/main/packages/utils/src/types.ts",children:"@rjsf/utils/types.ts"}),".\nBe sure to pay attention to the hierarchical intersection to these other types: ",(0,o.jsx)(n.code,{children:"UIOptionsBaseType"})," and ",(0,o.jsx)(n.code,{children:"TemplatesType"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"exceptions-to-the-equivalence",children:"Exceptions to the equivalence"}),"\n",(0,o.jsxs)(n.p,{children:["There are 4 properties that exist in a ",(0,o.jsx)(n.code,{children:"UiSchema"})," that will not be found in an inner ",(0,o.jsx)(n.code,{children:"ui:options"})," object."]}),"\n",(0,o.jsxs)(n.h3,{id:"ui",children:["ui",":globalOptions"]}),"\n",(0,o.jsxs)(n.p,{children:["The set of globally relevant ",(0,o.jsx)(n.code,{children:"UiSchema"})," options that are read from the root-level ",(0,o.jsx)(n.code,{children:"UiSchema"})," and stored in the ",(0,o.jsx)(n.code,{children:"registry"})," for use everywhere."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:globalOptions': { copyable: true },\n};\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"ui-deprecated",children:["ui",":rootFieldId"," (deprecated)"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["DEPRECATED: Use ",(0,o.jsx)(n.code,{children:"Form.idPrefix"})," instead, will be removed in a future major version"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["By default, this library will generate ids unique to the form for all rendered widgets.\nIf you plan on using multiple instances of the ",(0,o.jsx)(n.code,{children:"Form"})," component in a same page, it's wise to declare a root prefix for these, using the ",(0,o.jsx)(n.code,{children:"ui:rootFieldId"})," uiSchema directive:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:rootFieldId': 'myform',\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This will make all widgets have an id prefixed with ",(0,o.jsx)(n.code,{children:"myform"}),"."]}),"\n",(0,o.jsxs)(n.h3,{id:"ui-1",children:["ui",":field"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ui:field"})," property overrides the ",(0,o.jsx)(n.code,{children:"Field"})," implementation used for rendering any field in the form's hierarchy.\nSpecify either the name of a field that is used to look up an implementation from the ",(0,o.jsx)(n.code,{children:"fields"})," list or an actual one-off ",(0,o.jsx)(n.code,{children:"Field"})," component implementation itself."]}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/advanced-customization/custom-widgets-fields#custom-field-components",children:"Custom Widgets and Fields"})," for more information about how to use this property."]}),"\n",(0,o.jsxs)(n.h3,{id:"ui-2",children:["ui",":fieldReplacesAnyOrOneOf"]}),"\n",(0,o.jsxs)(n.p,{children:["By default, any field that is rendered for an ",(0,o.jsx)(n.code,{children:"anyOf"}),"/",(0,o.jsx)(n.code,{children:"oneOf"})," schema will be wrapped inside the ",(0,o.jsx)(n.code,{children:"AnyOfField"})," or ",(0,o.jsx)(n.code,{children:"OneOfField"})," component.\nThis default behavior may be undesirable if your custom field already handles behavior related to choosing one or more subschemas contained in the ",(0,o.jsx)(n.code,{children:"anyOf"}),"/",(0,o.jsx)(n.code,{children:"oneOf"})," schema.\nBy providing a ",(0,o.jsx)(n.code,{children:"true"})," value for this flag in association with a custom ",(0,o.jsx)(n.code,{children:"ui:field"}),", the wrapped components will be omitted, so just one instance of the custom field will be rendered.\nIf the flag is omitted or set to ",(0,o.jsx)(n.code,{children:"false"}),", your custom field will be wrapped by ",(0,o.jsx)(n.code,{children:"AnyOfField"}),"/",(0,o.jsx)(n.code,{children:"OneOfField"}),"."]}),"\n",(0,o.jsxs)(n.h3,{id:"ui-3",children:["ui",":options"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ui:options"})," property cannot be nested inside itself and thus is the last exception."]}),"\n",(0,o.jsxs)(n.h2,{id:"ui-or-uixxx",children:["ui",":XXX"," or ui",":options",".XXX"]}),"\n",(0,o.jsxs)(n.p,{children:["All the properties that follow can be specified in the ",(0,o.jsx)(n.code,{children:"uiSchema"})," in either of the two equivalent ways."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["NOTE: The properties specific to array items can be found ",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/json-schema/arrays#array-item-uiSchema-options",children:"here"}),". For advanced dynamic UI schema capabilities for array items, see the ",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/api-reference/dynamic-ui-schema-examples",children:"Dynamic UI Schema Examples"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"widget",children:"widget"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ui:widget"})," property overrides the ",(0,o.jsx)(n.code,{children:"Widget"})," implementation used for rendering any field in the form's hierarchy.\nSpecify either the name of a widget that is used to look up an implementation from the ",(0,o.jsx)(n.code,{children:"widgets"})," list or an actual one-off ",(0,o.jsx)(n.code,{children:"Widget"})," component implementation itself."]}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/advanced-customization/custom-widgets-fields",children:"Custom Widgets and Fields"})," for more information about how to use this property."]}),"\n",(0,o.jsx)(n.h3,{id:"classnames",children:"classNames"}),"\n",(0,o.jsxs)(n.p,{children:["The uiSchema object accepts a ",(0,o.jsx)(n.code,{children:"ui:classNames"})," property for each field of the schema:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { UiSchema } from '@rjsf/utils';\n\nconst uiSchema = {\n  title: {\n    'ui:classNames': 'task-title foo-bar',\n  },\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"Will result in:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<div class="field field-string task-title foo-bar">\n  <label>\n    <span>Title*</span>\n    <input value="My task" required="" type="text" />\n  </label>\n</div>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"style",children:"style"}),"\n",(0,o.jsxs)(n.p,{children:["The uiSchema object accepts a ",(0,o.jsx)(n.code,{children:"ui:style"})," property for each field of the schema:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { UiSchema } from '@rjsf/utils';\n\nconst uiSchema = {\n  title: {\n    'ui:style': { color: 'red' },\n  },\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"Will result in:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<div class="field field-string task-title" style={{ color: "red" }}>\n  <label>\n    <span>Title*</span>\n    <input value="My task" required="" type="text">\n  </label>\n</div>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"autocomplete",children:"autocomplete"}),"\n",(0,o.jsxs)(n.p,{children:["If you want to mark a text input, select or textarea input to use the HTML autocomplete feature, set the ",(0,o.jsx)(n.code,{children:"ui:autocomplete"})," uiSchema directive to a valid ",(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values",children:"HTML autocomplete value"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:widget': 'textarea',\n  'ui:autocomplete': 'on',\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"autofocus",children:"autofocus"}),"\n",(0,o.jsxs)(n.p,{children:["If you want to automatically focus on a text input or textarea input, set the ",(0,o.jsx)(n.code,{children:"ui:autofocus"})," uiSchema directive to ",(0,o.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:widget': 'textarea',\n  'ui:autofocus': true,\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"description",children:"description"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes it's convenient to change the description of a field. This is the purpose of the ",(0,o.jsx)(n.code,{children:"ui:description"})," uiSchema directive:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:widget': 'password',\n  'ui:description': 'The best password',\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"disabled",children:"disabled"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ui:disabled"})," uiSchema directive will disable all child widgets from a given field."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Note: If you're wondering about the difference between a ",(0,o.jsx)(n.code,{children:"disabled"})," field and a ",(0,o.jsx)(n.code,{children:"readonly"})," one: Marking a field as read-only will render it greyed out, but its text value will be selectable. Disabling it will prevent its value to be selected at all."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"enablemarkdownindescription",children:"enableMarkdownInDescription"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ui:enableMarkdownInDescription"})," uiSchema directive enables the support of Markdown syntax within the description of\na field."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = { type: 'string', description: '**bolded** text in the description' };\nconst uiSchema: UiSchema = {\n  'ui:enableMarkdownInDescription': true,\n};\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,o.jsxs)(n.p,{children:["It can also be enabled globally by setting the ",(0,o.jsx)(n.code,{children:"enableMarkdownInDescription"})," option to ",(0,o.jsx)(n.code,{children:"true"})," in the ",(0,o.jsx)(n.code,{children:"ui:globalOptions"}),"\nuiSchema directive."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = { type: 'string', description: '**bolded** text in the description' };\nconst uiSchema: UiSchema = {\n  'ui:globalOptions': {\n    enableMarkdownInDescription: true,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,o.jsx)(n.h3,{id:"enableoptionaldatafieldfortype",children:"enableOptionalDataFieldForType"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ui:enableOptionalDataFieldForType"})," uiSchema directive enables support for displaying the ",(0,o.jsx)(n.code,{children:"Optional Data Controls"})," feature.\nThe intention of this feature is to allow developers to provide a condensed UI for users who don't care to enter an optional list of array items or set of optional object fields (see ",(0,o.jsx)(n.a,{href:"#add-optional-data-controls",children:"examples"})," below)."]}),"\n",(0,o.jsx)(n.p,{children:"This directive takes, as its value, an array in one of four forms:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"[]"})," - Disables the feature at a global or field level"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"['array']"})," - Enables the feature only for optional arrays at a global or field level"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"['object']"})," - Enables the feature only for optional object at a global or field level"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"['array', 'object']"}),"- Enables the feature for both optional object and arrays at a global or field level"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["It can be specified in either the ",(0,o.jsx)(n.code,{children:"ui:globalOptions"})," to turn the feature on for everything or in a specific field's ",(0,o.jsx)(n.code,{children:"uiSchema"}),"\nTo work properly this option must be coupled with the ",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/api-reference/form-props#emptyobjectfields",children:"emptyObjectFields"})," experimental feature on ",(0,o.jsx)(n.code,{children:"Form"})," using the ",(0,o.jsx)(n.code,{children:"populateRequiredDefaults"})," or ",(0,o.jsx)(n.code,{children:"skipDefaults"})," options."]}),"\n",(0,o.jsxs)(n.p,{children:["When enabled for either (or both) the ",(0,o.jsx)(n.code,{children:"array"})," or ",(0,o.jsx)(n.code,{children:"object"}),' types, any optional object or array field which has an "undefined" value in ',(0,o.jsx)(n.code,{children:"formData"})," will NOT render any of the container's UI elements.\nInstead the object/array container's field title will have an \"Add optional data\" icon button that, when clicked will cause an empty container data element to be added to ",(0,o.jsx)(n.code,{children:"formData"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["When enabled for either (or both) the ",(0,o.jsx)(n.code,{children:"array"})," or ",(0,o.jsx)(n.code,{children:"object"}),' types, any optional object or array field which has an "defined" value in ',(0,o.jsx)(n.code,{children:"formData"})," will render all of the container's UI elements as normal AND the object/array container's field title will have a \"Remove optional data\" icon button that, when clicked will set the data for field in the ",(0,o.jsx)(n.code,{children:"formData"}),' to "undefined".']}),"\n",(0,o.jsxs)(n.p,{children:["Here is an example of what the UI will look like when enabled using the following ",(0,o.jsx)(n.code,{children:"Form"})," configuration:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"const schema: RJSFSchema = {\n  title: 'test',\n  properties: {\n    nestedObjectOptional: {\n      type: 'object',\n      properties: {\n        test: {\n          type: 'string',\n        },\n      },\n    },\n    nestedArrayOptional: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n  },\n};\nconst uiSchema = {\n  'ui:globalOptions': {\n    enableOptionalDataFieldForType: ['object', 'array'],\n  },\n};\nconst experimental_defaultFormStateBehavior = {\n  // Set the emptyObjectFields to only populate required defaults to highlight the code working\n  emptyObjectFields: 'populateRequiredDefaults',\n};\n\nrender(\n  <Form\n    schema={schema}\n    validator={validator}\n    uiSchema={uiSchema}\n    experimental_defaultFormStateBehavior={experimental_defaultFormStateBehavior}\n    templates={{ OptionalDataControlsTemplate }}\n  />,\n  document.getElementById('app'),\n);\n"})}),"\n",(0,o.jsx)(n.h4,{id:"add-optional-data-controls",children:"Add Optional Data Controls"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"add optional data controls",src:i(4387).A+"",width:"1228",height:"336"})}),"\n",(0,o.jsx)(n.h4,{id:"remove-optional-data-controls",children:"Remove Optional Data Controls"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"remove optional data controls",src:i(9144).A+"",width:"1220",height:"578"})}),"\n",(0,o.jsx)(n.h3,{id:"emptyvalue",children:"emptyValue"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ui:emptyValue"})," uiSchema directive provides the default value to use when an input for a field is empty"]}),"\n",(0,o.jsx)(n.h3,{id:"enumdisabled",children:"enumDisabled"}),"\n",(0,o.jsxs)(n.p,{children:["To disable an option, use the ",(0,o.jsx)(n.code,{children:"enumDisabled"})," property in uiSchema."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  enum: ['one', 'two', 'three'],\n};\n\nconst uiSchema: UiSchema = {\n  'ui:enumDisabled': ['two'],\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"enumnames",children:"enumNames"}),"\n",(0,o.jsx)(n.p,{children:"Allows a user to provide a list of labels for enum values in the schema."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'number',\n  enum: [1, 2, 3],\n};\nconst uiSchema: UiSchema = {\n  'ui:enumNames': ['one', 'two', 'three'],\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"filepreview",children:"filePreview"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"FileWidget"})," can be configured to show a preview of an image or a download link for non-images using this flag."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'string',\n  format: 'data-url',\n};\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    filePreview: true,\n  },\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"help",children:"help"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes it's convenient to add text next to a field to guide the end user filling it. This is the purpose of the ",(0,o.jsx)(n.code,{children:"ui:help"})," uiSchema directive:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:widget': 'password',\n  'ui:help': 'Hint: Make it strong!',\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://i.imgur.com/scJUuZo.png",alt:""})}),"\n",(0,o.jsx)(n.p,{children:"Help texts work for any kind of field at any level, and will always be rendered immediately below the field component widget(s) (after contextualized errors, if any)."}),"\n",(0,o.jsx)(n.h3,{id:"hideerror",children:"hideError"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ui:hideError"})," uiSchema directive will, if set to ",(0,o.jsx)(n.code,{children:"true"}),", hide the default error display for the given field AND all of its child fields in the hierarchy."]}),"\n",(0,o.jsxs)(n.p,{children:["If you need to enable the default error display of a child in the hierarchy after setting ",(0,o.jsx)(n.code,{children:"hideError: true"})," on the parent field, simply set ",(0,o.jsx)(n.code,{children:"hideError: false"})," on the child."]}),"\n",(0,o.jsxs)(n.p,{children:["This is useful when you have a custom field or widget that utilizes either the ",(0,o.jsx)(n.code,{children:"rawErrors"})," or the ",(0,o.jsx)(n.code,{children:"errorSchema"})," to manipulate and/or show the error(s) for the field/widget itself."]}),"\n",(0,o.jsx)(n.h3,{id:"inputtype",children:"inputType"}),"\n",(0,o.jsxs)(n.p,{children:["To change the input type (for example, ",(0,o.jsx)(n.code,{children:"tel"})," or ",(0,o.jsx)(n.code,{children:"email"}),") you can specify the ",(0,o.jsx)(n.code,{children:"inputType"})," in the ",(0,o.jsx)(n.code,{children:"ui:options"})," uiSchema directive."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    inputType: 'tel',\n  },\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"label",children:"label"}),"\n",(0,o.jsxs)(n.p,{children:["Field labels are rendered by default.\nLabels may be omitted on a per-field by setting the ",(0,o.jsx)(n.code,{children:"label"})," option to ",(0,o.jsx)(n.code,{children:"false"})," in the ",(0,o.jsx)(n.code,{children:"ui:options"})," uiSchema directive."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    label: false,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,o.jsxs)(n.p,{children:["They can also be omitted globally by setting the ",(0,o.jsx)(n.code,{children:"label"})," option to ",(0,o.jsx)(n.code,{children:"false"})," in the ",(0,o.jsx)(n.code,{children:"ui:globalOptions"})," uiSchema directive."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:globalOptions': {\n    label: false,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,o.jsx)(n.h3,{id:"order",children:"order"}),"\n",(0,o.jsxs)(n.p,{children:["This property allows you to reorder the properties that are shown for a particular object. See ",(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/json-schema/objects",children:"Objects"})," for more information."]}),"\n",(0,o.jsx)(n.h3,{id:"placeholder",children:"placeholder"}),"\n",(0,o.jsxs)(n.p,{children:["You can add placeholder text to an input by using the ",(0,o.jsx)(n.code,{children:"ui:placeholder"})," uiSchema directive:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = { type: 'string', format: 'uri' };\nconst uiSchema: UiSchema = {\n  'ui:placeholder': 'http://',\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Fields using ",(0,o.jsx)(n.code,{children:"enum"})," can also use ",(0,o.jsx)(n.code,{children:"ui:placeholder"}),". The value will be used as the text for the empty option in the select widget."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = { type: 'string', enum: ['First', 'Second'] };\nconst uiSchema: UiSchema = {\n  'ui:placeholder': 'Choose an option',\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,o.jsx)(n.h3,{id:"readonly",children:"readonly"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"ui:readonly"})," uiSchema directive will mark all child widgets from a given field as read-only. This is equivalent to setting the ",(0,o.jsx)(n.code,{children:"readOnly"})," property in the schema."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Note: If you're wondering about the difference between a ",(0,o.jsx)(n.code,{children:"disabled"})," field and a ",(0,o.jsx)(n.code,{children:"readonly"})," one: Marking a field as read-only will render it greyed out, but its text value will be selectable. Disabling it will prevent its value to be selected at all."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"rows",children:"rows"}),"\n",(0,o.jsxs)(n.p,{children:["You can set the initial height of a textarea widget by specifying ",(0,o.jsx)(n.code,{children:"rows"})," option."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { Form } from '@rjsf/core';\nimport { RJSFSchema, UiSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:options': {\n    widget: 'textarea',\n    rows: 15,\n  },\n};\n\nrender(<Form schema={schema} uiSchema={uiSchema} validator={validator} />, document.getElementById('app'));\n"})}),"\n",(0,o.jsx)(n.h3,{id:"title",children:"title"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes it's convenient to change a field's title. This is the purpose of the ",(0,o.jsx)(n.code,{children:"ui:title"})," uiSchema directive:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = { type: 'string' };\nconst uiSchema: UiSchema = {\n  'ui:widget': 'password',\n  'ui:title': 'Your password',\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"submitbuttonoptions",children:"submitButtonOptions"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes it's convenient to change the behavior of the submit button for the form. This is the purpose of the ",(0,o.jsx)(n.code,{children:"ui:submitButtonOptions"})," uiSchema directive:"]}),"\n",(0,o.jsx)(n.p,{children:"You can pass any other prop to the submit button if you want, by default, this library will set the following options / props mentioned below for all submit buttons:"}),"\n",(0,o.jsxs)(n.h4,{id:"norender-option",children:[(0,o.jsx)(n.code,{children:"norender"})," option"]}),"\n",(0,o.jsxs)(n.p,{children:["You can set this property to ",(0,o.jsx)(n.code,{children:"true"})," to remove the submit button completely from the form. Nice option, if the form is just for viewing purposes."]}),"\n",(0,o.jsxs)(n.h4,{id:"submittext-option",children:[(0,o.jsx)(n.code,{children:"submitText"})," option"]}),"\n",(0,o.jsx)(n.p,{children:'You can use this option to change the text of the submit button. Set to "Submit" by default.'}),"\n",(0,o.jsxs)(n.h4,{id:"props-section",children:[(0,o.jsx)(n.code,{children:"props"})," section"]}),"\n",(0,o.jsx)(n.p,{children:"You can pass any other prop to the submit button if you want, via this section."}),"\n",(0,o.jsxs)(n.h5,{id:"disabled-prop",children:[(0,o.jsx)(n.code,{children:"disabled"})," prop"]}),"\n",(0,o.jsx)(n.p,{children:"You can use this option to disable the submit button."}),"\n",(0,o.jsxs)(n.h5,{id:"classname-prop",children:[(0,o.jsx)(n.code,{children:"className"})," prop"]}),"\n",(0,o.jsx)(n.p,{children:"You can use this option to specify a class name for the submit button."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { UiSchema } from '@rjsf/utils';\n\nconst uiSchema: UiSchema = {\n  'ui:submitButtonOptions': {\n    props: {\n      disabled: false,\n      className: 'btn btn-info',\n    },\n    norender: false,\n    submitText: 'Submit',\n  },\n};\n"})}),"\n",(0,o.jsxs)(n.h2,{id:"duplicatekeysuffixseparator-option",children:[(0,o.jsx)(n.code,{children:"duplicateKeySuffixSeparator"})," option"]}),"\n",(0,o.jsxs)(n.p,{children:["When using ",(0,o.jsx)(n.code,{children:"additionalProperties"}),", key collision is prevented by appending a unique integer suffix to the duplicate key.\nFor example, when you add a key named ",(0,o.jsx)(n.code,{children:"myKey"})," to a form where ",(0,o.jsx)(n.code,{children:"myKey"})," is already defined, then your new key will become ",(0,o.jsx)(n.code,{children:"myKey-1"}),".\nYou can use ",(0,o.jsx)(n.code,{children:"ui:duplicateKeySuffixSeparator"})," to override the default separator, ",(0,o.jsx)(n.code,{children:'"-"'})," with a string of your choice on a per-field basis."]}),"\n",(0,o.jsxs)(n.p,{children:["You can also set this in the ",(0,o.jsx)(n.code,{children:"ui:globalOptions"})," to have the same separator used everywhere."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { UiSchema } from '@rjsf/utils';\n\nconst uiSchema = {\n  'ui:globalOptions': {\n    duplicateKeySuffixSeparator: '_',\n  },\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"using-uischema-with-oneof-anyof",children:"Using uiSchema with oneOf, anyOf"}),"\n",(0,o.jsx)(n.h3,{id:"anyof",children:"anyOf"}),"\n",(0,o.jsxs)(n.p,{children:["The uiSchema will work with elements inside an ",(0,o.jsx)(n.code,{children:"anyOf"})," as long as the uiSchema defines the ",(0,o.jsx)(n.code,{children:"anyOf"})," key at the same level as the ",(0,o.jsx)(n.code,{children:"anyOf"})," within the ",(0,o.jsx)(n.code,{children:"schema"}),".\nBecause the ",(0,o.jsx)(n.code,{children:"anyOf"})," in the ",(0,o.jsx)(n.code,{children:"schema"})," is an array, so must be the one in the ",(0,o.jsx)(n.code,{children:"uiSchema"}),".\nIf you want to override the titles of the first two elements within the ",(0,o.jsx)(n.code,{children:"anyOf"})," list you would do the following:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  anyOf: [\n    {\n      title: 'Strings',\n      type: 'string',\n    },\n    {\n      title: 'Numbers',\n      type: 'number',\n    },\n    {\n      title: 'Booleans',\n      type: 'boolean',\n    },\n  ],\n};\n\nconst uiSchema: UiSchema = {\n  anyOf: [\n    {\n      'ui:title': 'Custom String Title',\n    },\n    {\n      'ui:title': 'Custom Number Title',\n    },\n  ],\n};\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["NOTE: Because the third element in the ",(0,o.jsx)(n.code,{children:"schema"})," does not have an associated element in the ",(0,o.jsx)(n.code,{children:"uiSchema"}),", it will keep its original title."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"oneof",children:"oneOf"}),"\n",(0,o.jsxs)(n.p,{children:["The uiSchema will work with elements inside an ",(0,o.jsx)(n.code,{children:"oneOf"})," as long as the uiSchema defines the ",(0,o.jsx)(n.code,{children:"oneOf"})," key at the same level as the ",(0,o.jsx)(n.code,{children:"oneOf"})," within the ",(0,o.jsx)(n.code,{children:"schema"}),".\nBecause the ",(0,o.jsx)(n.code,{children:"oneOf"})," in the ",(0,o.jsx)(n.code,{children:"schema"})," is an array, so must be the one in the ",(0,o.jsx)(n.code,{children:"uiSchema"}),".\nIf you want to override the titles of the first two elements within the ",(0,o.jsx)(n.code,{children:"oneOf"})," list you would do the following:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"import { RJSFSchema, UiSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  oneOf: [\n    {\n      title: 'Strings',\n      type: 'string',\n    },\n    {\n      title: 'Numbers',\n      type: 'number',\n    },\n    {\n      title: 'Booleans',\n      type: 'boolean',\n    },\n  ],\n};\n\nconst uiSchema: UiSchema = {\n  oneOf: [\n    {\n      'ui:title': 'Custom String Title',\n    },\n    {\n      'ui:title': 'Custom Number Title',\n    },\n  ],\n};\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["NOTE: Because the third element in the ",(0,o.jsx)(n.code,{children:"schema"})," does not have an associated element in the ",(0,o.jsx)(n.code,{children:"uiSchema"}),", it will keep its original title."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"theme-options",children:"Theme Options"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/api-reference/themes/antd/uiSchema",children:"AntD Customization"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/api-reference/themes/chakra-ui/uiSchema",children:"Chakra-UI Customization"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/api-reference/themes/primereact/uiSchema",children:"PrimeReact Customization"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/react-jsonschema-form/docs/api-reference/themes/semantic-ui/uiSchema",children:"Semantic-UI Customization"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},9144:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/OptionalDataControlsRemove-9b0e8a0be5e5ba06f1066ab5057b8e7b.png"}}]);