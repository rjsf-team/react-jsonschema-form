"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[2455],{1184:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>s});var t=i(4041);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},5468:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"migration-guides/v6.x upgrade guide","title":"6.x Upgrade Guide","description":"New packages","source":"@site/docs/migration-guides/v6.x upgrade guide.md","sourceDirName":"migration-guides","slug":"/migration-guides/v6.x upgrade guide","permalink":"/react-jsonschema-form/docs/migration-guides/v6.x upgrade guide","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/migration-guides/v6.x upgrade guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"5.x Upgrade Guide","permalink":"/react-jsonschema-form/docs/migration-guides/v5.x upgrade guide"},"next":{"title":"Usage and Customization","permalink":"/react-jsonschema-form/docs/usage/"}}');var r=i(1085),a=i(1184);const o={},s="6.x Upgrade Guide",d={},l=[{value:"New packages",id:"new-packages",level:2},{value:"New deprecations",id:"new-deprecations",level:2},{value:"UiSchema.rootFieldId",id:"uischemarootfieldid",level:3},{value:"@rjsf/semantic-ui",id:"rjsfsemantic-ui",level:3},{value:"Breaking changes",id:"breaking-changes",level:2},{value:"CJS build changes",id:"cjs-build-changes",level:3},{value:"Theme removals",id:"theme-removals",level:3},{value:"bootstrap-4",id:"bootstrap-4",level:4},{value:"fluent-ui",id:"fluent-ui",level:4},{value:"material-ui",id:"material-ui",level:4},{value:"validator-ajv6",id:"validator-ajv6",level:3},{value:"Theme version support changes",id:"theme-version-support-changes",level:3},{value:"@rjsf/antd",id:"rjsfantd",level:4},{value:"@rjsf/chakra-ui",id:"rjsfchakra-ui",level:4},{value:"@mui version 5 and 6",id:"mui-version-5-and-6",level:4},{value:"@rjsf/semantic-ui",id:"rjsfsemantic-ui-1",level:4},{value:"Node support",id:"node-support",level:3},{value:"React version",id:"react-version",level:3},{value:"Form POTENTIAL BREAKING CHANGE",id:"form-potential-breaking-change",level:3},{value:"IdSchema replacement BREAKING CHANGE",id:"idschema-replacement-breaking-change",level:3},{value:"idSchema props",id:"idschema-props",level:4},{value:"toIdSchema() removed",id:"toidschema-removed",level:4},{value:"formContext BREAKING CHANGES",id:"formcontext-breaking-changes",level:3},{value:"Fields BREAKING CHANGES",id:"fields-breaking-changes",level:3},{value:"FieldProps.onChange",id:"fieldpropsonchange",level:4},{value:"FieldProps.idPrefix and FieldProps.idSeparator refactor",id:"fieldpropsidprefix-and-fieldpropsidseparator-refactor",level:4},{value:"FieldTemplateProps and WrapIfAdditionalTemplateProps BREAKING CHANGES",id:"fieldtemplateprops-and-wrapifadditionaltemplateprops-breaking-changes",level:3},{value:"onKeyChange replacement",id:"onkeychange-replacement",level:4},{value:"onDropPropertyClick replacement",id:"ondroppropertyclick-replacement",level:4},{value:"ObjectFieldTemplateProps BREAKING CHANGES",id:"objectfieldtemplateprops-breaking-changes",level:3},{value:"onAddClick replacement",id:"onaddclick-replacement",level:4},{value:"Registry BREAKING CHANGES",id:"registry-breaking-changes",level:3},{value:"Templates BREAKING CHANGES",id:"templates-breaking-changes",level:3},{value:"ArrayFieldTemplateItemType renamed",id:"arrayfieldtemplateitemtype-renamed",level:4},{value:"ArrayFieldItemTemplate BREAKING CHANGES",id:"arrayfielditemtemplate-breaking-changes",level:4},{value:"onAddIndexClick replacement",id:"onaddindexclick-replacement",level:5},{value:"onCopyIndexClick replacement",id:"oncopyindexclick-replacement",level:5},{value:"onDropIndexClick replacement",id:"ondropindexclick-replacement",level:5},{value:"onReorderClick replacement",id:"onreorderclick-replacement",level:5},{value:"ArrayFieldTemplate BREAKING CHANGE",id:"arrayfieldtemplate-breaking-change",level:4},{value:"Potential BREAKING CHANGE",id:"potential-breaking-change",level:5},{value:"ArrayFieldTitleTemplate POTENTIAL BREAKING CHANGE",id:"arrayfieldtitletemplate-potential-breaking-change",level:4},{value:"GridTemplate",id:"gridtemplate",level:4},{value:"MultiSchemaFieldTemplate",id:"multischemafieldtemplate",level:4},{value:"ObjectFieldTemplate POTENTIAL BREAKING CHANGE",id:"objectfieldtemplate-potential-breaking-change",level:4},{value:"OptionalDataControlsTemplate POTENTIAL BREAKING CHANGE",id:"optionaldatacontrolstemplate-potential-breaking-change",level:4},{value:"TitleFieldTemplate POTENTIAL BREAKING CHANGE",id:"titlefieldtemplate-potential-breaking-change",level:4},{value:"SchemaUtilsType",id:"schemautilstype",level:4},{value:"Removed deprecations",id:"removed-deprecations",level:3},{value:"FormProps.acceptcharset",id:"formpropsacceptcharset",level:4},{value:"getMatchingOption()",id:"getmatchingoption",level:4},{value:"SchemaUtilsType.getMatchingOption()",id:"schemautilstypegetmatchingoption",level:4},{value:"mergeValidationData()",id:"mergevalidationdata",level:4},{value:"SchemaUtilsType.mergeValidationData()",id:"schemautilstypemergevalidationdata",level:4},{value:"ValidatorType.toErrorList()",id:"validatortypetoerrorlist",level:4},{value:"RJSF_ADDITONAL_PROPERTIES_FLAG",id:"rjsf_additonal_properties_flag",level:4},{value:"UiSchema.classNames",id:"uischemaclassnames",level:4},{value:"schema.enumNames",id:"schemaenumnames",level:4},{value:"Other BREAKING CHANGES",id:"other-breaking-changes",level:3},{value:"Primitive field handling in oneOf/anyOf schemas",id:"primitive-field-handling-in-oneofanyof-schemas",level:4},{value:"SchemaField removed Bootstrap 3 classes",id:"schemafield-removed-bootstrap-3-classes",level:4},{value:"Prefixed RJSF template and field marker classes",id:"prefixed-rjsf-template-and-field-marker-classes",level:4},{value:"optionsList",id:"optionslist",level:4},{value:"New Features",id:"new-features",level:2},{value:"New types",id:"new-types",level:3},{value:"New non-validator utility functions",id:"new-non-validator-utility-functions",level:3},{value:"New validator-based utility functions",id:"new-validator-based-utility-functions",level:3},{value:"Changes to existing utility functions",id:"changes-to-existing-utility-functions",level:3},{value:"Optional Data Controls",id:"optional-data-controls",level:3},{value:"Dynamic UI Schema for Array Items",id:"dynamic-ui-schema-for-array-items",level:3},{value:"Custom field <code>name</code> generation",id:"custom-field-name-generation",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",del:"del",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"6x-upgrade-guide",children:"6.x Upgrade Guide"})}),"\n",(0,r.jsx)(n.h2,{id:"new-packages",children:"New packages"}),"\n",(0,r.jsx)(n.p,{children:"There are 5 new packages added in RJSF version 6:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@rjsf/daisyui"}),": This is new theme based on the ",(0,r.jsx)(n.code,{children:"daisyui"})," toolkit"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@rjsf/mantine"}),": This is new theme based on the ",(0,r.jsx)(n.code,{children:"mantine"})," toolkit"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@rjsf/primereact"}),": This is a new theme based on the ",(0,r.jsx)(n.code,{children:"PrimeReact"})," toolkit"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@rjsf/react-bootstrap"}),": This is rename of the ",(0,r.jsx)(n.code,{children:"bootstrap-4"})," theme with an upgrade to the latest version of ",(0,r.jsx)(n.code,{children:"react-bootstrap"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@rjsf/shadcn"}),": This is new theme based on the ",(0,r.jsx)(n.code,{children:"shadcn"})," toolkit"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"new-deprecations",children:"New deprecations"}),"\n",(0,r.jsx)(n.h3,{id:"uischemarootfieldid",children:"UiSchema.rootFieldId"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ui:rootFieldId"})," notation on ",(0,r.jsx)(n.code,{children:"UiSchema"})," was deprecated in favor of ",(0,r.jsx)(n.code,{children:"Form.idPrefix"}),".\nThis notation will be removed in a future major version release"]}),"\n",(0,r.jsx)(n.h3,{id:"rjsfsemantic-ui",children:"@rjsf/semantic-ui"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"semantic-ui"})," theme is deprecated and will be removed in a future major version release unless ",(0,r.jsx)(n.code,{children:"sematic-ui-react"})," version 3 is released with React 19 support.\nAlthough that seems unlikely as no changes have been made to version 3 since December 2023."]}),"\n",(0,r.jsx)(n.h2,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,r.jsx)(n.h3,{id:"cjs-build-changes",children:"CJS build changes"}),"\n",(0,r.jsxs)(n.p,{children:["Due to making all of the ",(0,r.jsx)(n.code,{children:"package.json"})," files for the ",(0,r.jsx)(n.code,{children:"@rjsf/*"})," libraries include ",(0,r.jsx)(n.code,{children:'"type": "module"'})," to better support modern ",(0,r.jsx)(n.code,{children:"ESM"})," builds, the generation of the Common JS distributions were updated to produce ",(0,r.jsx)(n.code,{children:".cjs"})," files rather than ",(0,r.jsx)(n.code,{children:".js"})," files.\nHopefully this will not cause any issues with existing uses of the libraries. If so, one may need to switch from doing an ",(0,r.jsx)(n.code,{children:"import"})," of the CJS build to doing a ",(0,r.jsx)(n.code,{children:"require()"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"theme-removals",children:"Theme removals"}),"\n",(0,r.jsx)(n.p,{children:"The following themes were removed due to duplication of a framework with a newer theme"}),"\n",(0,r.jsx)(n.h4,{id:"bootstrap-4",children:"bootstrap-4"}),"\n",(0,r.jsxs)(n.p,{children:["The older ",(0,r.jsx)(n.code,{children:"bootstrap-4"})," theme has been removed in favor of the ",(0,r.jsx)(n.code,{children:"react-bootstrap"})," theme"]}),"\n",(0,r.jsx)(n.h4,{id:"fluent-ui",children:"fluent-ui"}),"\n",(0,r.jsxs)(n.p,{children:["The older ",(0,r.jsx)(n.code,{children:"fluent-ui"})," theme has been removed in favor of the ",(0,r.jsx)(n.code,{children:"fluentui-rc"})," theme"]}),"\n",(0,r.jsx)(n.h4,{id:"material-ui",children:"material-ui"}),"\n",(0,r.jsxs)(n.p,{children:["The older ",(0,r.jsx)(n.code,{children:"material-ui"})," theme has been removed in favor of the ",(0,r.jsx)(n.code,{children:"mui"})," theme"]}),"\n",(0,r.jsx)(n.h3,{id:"validator-ajv6",children:"validator-ajv6"}),"\n",(0,r.jsxs)(n.p,{children:["This deprecated validator has been removed. Use the ",(0,r.jsx)(n.code,{children:"validator-ajv8"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"theme-version-support-changes",children:"Theme version support changes"}),"\n",(0,r.jsx)(n.h4,{id:"rjsfantd",children:"@rjsf/antd"}),"\n",(0,r.jsxs)(n.p,{children:["Version 6 is dropping official support for ",(0,r.jsx)(n.code,{children:"antd"})," version 4. You must upgrade to version 5."]}),"\n",(0,r.jsx)(n.h4,{id:"rjsfchakra-ui",children:"@rjsf/chakra-ui"}),"\n",(0,r.jsxs)(n.p,{children:["Version 6 is dropping official support for ",(0,r.jsx)(n.code,{children:"@chakra-ui"})," version 2. You must upgrade to version 3. We are also requiring\n",(0,r.jsx)(n.code,{children:"chakra-react-select"})," version >=6 as a result."]}),"\n",(0,r.jsx)(n.h4,{id:"mui-version-5-and-6",children:"@mui version 5 and 6"}),"\n",(0,r.jsxs)(n.p,{children:["Version 6 is dropping official support for ",(0,r.jsx)(n.code,{children:"@mui/material"})," and ",(0,r.jsx)(n.code,{children:"@mui/icons-material"})," versions 5 and 6 due to the adoption\nof breaking changes in version 7. You must upgrade to version 7."]}),"\n",(0,r.jsx)(n.h4,{id:"rjsfsemantic-ui-1",children:"@rjsf/semantic-ui"}),"\n",(0,r.jsxs)(n.p,{children:["Version 6 is dropping official support for ",(0,r.jsx)(n.code,{children:"semantic-ui-react"})," version 1. You must upgrade to version 2."]}),"\n",(0,r.jsx)(n.h3,{id:"node-support",children:"Node support"}),"\n",(0,r.jsxs)(n.p,{children:["Version 6 is dropping official support for Node 14, 16, and 18 as they are no longer ",(0,r.jsx)(n.a,{href:"https://nodejs.org/en/about/releases/",children:"maintained versions"}),".\nPlease use Node 22 when making any changes to ",(0,r.jsx)(n.code,{children:"package.json"})," and ",(0,r.jsx)(n.code,{children:"package-lock.json"})," files.\nAll PR and branch builds are running against Node 20 and 22."]}),"\n",(0,r.jsx)(n.h3,{id:"react-version",children:"React version"}),"\n",(0,r.jsx)(n.p,{children:"RJSF is no longer actively supporting React version < 18.x.\nReact 18 is officially supported on all the themes."}),"\n",(0,r.jsx)(n.p,{children:"React 19 support is expected before the end of beta (although several developers have already upgraded with no problems)."}),"\n",(0,r.jsx)(n.h3,{id:"form-potential-breaking-change",children:"Form POTENTIAL BREAKING CHANGE"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"onChange()"})," and ",(0,r.jsx)(n.code,{children:"onSubmit()"})," callbacks were accidentally returning extra data along with what was listed in the ",(0,r.jsx)(n.code,{children:"IChangeEvent"})," interface.\nIn v6, this was fixed so that only the data described by the ",(0,r.jsx)(n.code,{children:"IChangeEvent"})," interface is returned.\nIf you were relying on that extra data in the callbacks, we are sorry for the inconvenience."]}),"\n",(0,r.jsx)(n.h3,{id:"idschema-replacement-breaking-change",children:"IdSchema replacement BREAKING CHANGE"}),"\n",(0,r.jsxs)(n.p,{children:["The recursive ",(0,r.jsx)(n.code,{children:"IdSchema"})," type and all its usages was replaced with a much simpler ",(0,r.jsx)(n.code,{children:"FieldPathId"})," type.\nThis was done to remove a performance headache associated with having to recursively generate the ",(0,r.jsx)(n.code,{children:"IdSchema"})," for every change made to ",(0,r.jsx)(n.code,{children:"formData"}),".\nMoreover, after some evaluation, 99% of the use cases for the ",(0,r.jsx)(n.code,{children:"IdSchema"})," were simply to get the ",(0,r.jsx)(n.code,{children:"id"})," for a field."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"FieldPathId"})," is defined as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/** The list of path elements that represents where in the schema a field is located. When the item in the field list is\n * a string, then it represents the name of the property within an object. When it is a number, then it represents the\n * index within an array.\n *\n * For example:\n * `[]` represents the root object of the schema\n * `['foo', 'bar']` represents the `bar` element contained within the `foo` element of the schema\n * `['baz', 1]` represents the second element in the list `baz` of the schema\n */\nexport type FieldPathList = (string | number)[];\n\n/** Type describing an id and path used for a field */\nexport type FieldPathId = {\n  /** The id for a field */\n  $id: string;\n  /** The path for a field */\n  path: FieldPathList;\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"idschema-props",children:"idSchema props"}),"\n",(0,r.jsxs)(n.p,{children:["In addition, everywhere the ",(0,r.jsx)(n.code,{children:"idSchema: IdSchema<T>"})," prop was part of a RJSF type, it was replaced with ",(0,r.jsx)(n.code,{children:"fieldPathId: FieldPathId"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The affected types are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"FieldErrorProps"}),"\n",(0,r.jsx)(n.li,{children:"FieldHelpProps"}),"\n",(0,r.jsx)(n.li,{children:"FieldProps"}),"\n",(0,r.jsx)(n.li,{children:"UnsupportedFieldProps"}),"\n",(0,r.jsx)(n.li,{children:"ArrayFieldTitleProps"}),"\n",(0,r.jsx)(n.li,{children:"ArrayFieldDescriptionProps"}),"\n",(0,r.jsx)(n.li,{children:"ArrayFieldItemButtonsTemplateProps"}),"\n",(0,r.jsx)(n.li,{children:"ArrayFieldTemplateProps"}),"\n",(0,r.jsx)(n.li,{children:"ObjectFieldTemplateProps"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If you have built a custom component using one of those types that used ",(0,r.jsx)(n.code,{children:"idSchema: IdSchema"}),", simply replace that type and property name with ",(0,r.jsx)(n.code,{children:"fieldPathId: FieldPathId"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"For example, if you had a custom field:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { FieldProps } from '@rjsf/utils';\n\n// Version 5-based custom widget\nfunction CustomField(props: FieldProps) {\n  const {\n    idSchema: { $id },\n    formData,\n    value,\n  } = props;\n\n  return <div id={$id}>// Your field implementation</div>;\n}\n\n// Version 6-based custom widget\nfunction CustomField(props: FieldProps) {\n  const {\n    fieldPathId: { $id },\n    formData,\n    value,\n  } = props;\n\n  return <div id={$id}>// Your field implementation</div>;\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"toidschema-removed",children:"toIdSchema() removed"}),"\n",(0,r.jsxs)(n.p,{children:["Finally, the ",(0,r.jsx)(n.code,{children:"toIdSchema()"})," utility function was deleted and replaced with a new ",(0,r.jsx)(n.code,{children:"toFieldPathId()"})," function documented ",(0,r.jsx)(n.a,{href:"/react-jsonschema-form/docs/api-reference/utility-functions#tofieldpathid",children:"here"})]}),"\n",(0,r.jsx)(n.h3,{id:"formcontext-breaking-changes",children:"formContext BREAKING CHANGES"}),"\n",(0,r.jsxs)(n.p,{children:["Removed the unnecessary ",(0,r.jsx)(n.code,{children:"formContext"})," property from the following interfaces since it is readily available in the ",(0,r.jsx)(n.code,{children:"registry"}),".\nIf you were using the ",(0,r.jsx)(n.code,{children:"formContext"})," in your custom ",(0,r.jsx)(n.code,{children:"template"}),", ",(0,r.jsx)(n.code,{children:"field"})," or ",(0,r.jsx)(n.code,{children:"widget"}),", simply get it from the ",(0,r.jsx)(n.code,{children:"registry"})," instead."]}),"\n",(0,r.jsxs)(n.p,{children:["Interfaces with ",(0,r.jsx)(n.code,{children:"formContext"})," removed:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ErrorListProps"})," - The properties that are passed to an ",(0,r.jsx)(n.code,{children:"ErrorListTemplate"})," implementation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FieldProps"})," - The properties that are passed to a ",(0,r.jsx)(n.code,{children:"Field"})," implementation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FieldTemplateProps"})," - The properties that are passed to a ",(0,r.jsx)(n.code,{children:"FieldTemplate"})," implementation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ArrayFieldTemplateProps"})," - The properties that are passed to an ",(0,r.jsx)(n.code,{children:"ArrayFieldTemplate"})," implementation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WidgetProps"})," - The properties that are passed to a ",(0,r.jsx)(n.code,{children:"Widget"})," implementation"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"fields-breaking-changes",children:"Fields BREAKING CHANGES"}),"\n",(0,r.jsx)(n.h4,{id:"fieldpropsonchange",children:"FieldProps.onChange"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"onChange"})," handling for fields has been changed to fix a serious bug related to nearly simultaneous updates losing data.\nPreviously in 5.x, data change handling worked by passing a complete ",(0,r.jsx)(n.code,{children:"newFormData"})," object up to the ",(0,r.jsx)(n.code,{children:"Form"})," from the underlying ",(0,r.jsx)(n.code,{children:"Field"}),"s.\nIn 6.x, data change handling now works by passing just the changed ",(0,r.jsx)(n.code,{children:"newValue"})," for a ",(0,r.jsx)(n.code,{children:"Field"})," and the ",(0,r.jsx)(n.code,{children:"path"})," array of the ",(0,r.jsx)(n.code,{children:"Field"})," within the ",(0,r.jsx)(n.code,{children:"formData"}),", with the ",(0,r.jsx)(n.code,{children:"Form"})," itself being responsible for injecting the changed data into the ",(0,r.jsx)(n.code,{children:"formData"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["As a result, the ",(0,r.jsx)(n.code,{children:"FieldProps"})," interface was updated with the following breaking change so that custom ",(0,r.jsx)(n.code,{children:"Field"})," authors are forced to respond to this update:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Version 5's `onChange` handler:\n\n/** The field change event handler; called with the updated form data and an optional `ErrorSchema` */\nonChange: (newFormData: T | undefined, es?: ErrorSchema<T>, id?: string) => any;\n\n// Version 6's `onChange` handler:\n/** The field change event handler; called with the updated field value, the optional change path for the value\n * (defaults to an empty array), an optional ErrorSchema and the optional id of the field being changed\n */\nonChange: (newValue: T | undefined, path: FieldPathList, es?: ErrorSchema<T>, id?: string) => void;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In order to support letting the ",(0,r.jsx)(n.code,{children:"Form"})," know what the path of the change was, a new ",(0,r.jsx)(n.code,{children:"path: FieldPathList"})," parameter was injected into the handler before the ",(0,r.jsx)(n.code,{children:"es?: ErrorSchema<T>"})," parameter.\nIf you have written a custom ",(0,r.jsx)(n.code,{children:"Field"})," that implements merging the new value into the ",(0,r.jsx)(n.code,{children:"newFormData"}),", now you just need to pass that value and provide the ",(0,r.jsx)(n.code,{children:"fieldPathId.path"})," to the ",(0,r.jsx)(n.code,{children:"onChange"})," function."]}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example of a custom ",(0,r.jsx)(n.code,{children:"Field"})," that was updated due to this change:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { FieldProps } from '@rjsf/utils';\nimport { getDefaultRegistry } from '@rjsf/core';\n\nconst { ArrayField } = getDefaultRegistry().fields;\n\n// Version 5-based custom field\nfunction CustomField(props: FieldProps) {\n  const {\n    idSchema: { $id },\n    formData,\n    onChange,\n  } = props;\n  const changeHandlerFactory = (fieldName: string) => (event: any) => {\n    onChange({ ...formData, [fieldName]: event.target.value });\n  };\n  return (\n    <>\n      <h4>Location</h4>\n      <div>\n        <label htmlFor={`${$id}-city`}>City</label>\n        <input\n          className='form-control'\n          id={`${$id}-city`}\n          required={false}\n          placeholder=''\n          type='text'\n          value={formData?.city || ''}\n          onChange={changeHandlerFactory('city')}\n        />\n      </div>\n      <div>\n        <label htmlFor={`${$id}-lat`}>Latitude</label>\n        <input\n          className='form-control'\n          id={`${$id}-lat`}\n          type='number'\n          value={formData?.lat || 0}\n          onChange={changeHandlerFactory('lat')}\n        />\n      </div>\n      <div>\n        <label htmlFor={`${$id}-lon`}>Longitude</label>\n        <input\n          className='form-control'\n          id={`${$id}-lon`}\n          type='number'\n          value={formData?.lon || 0}\n          onChange={changeHandlerFactory('lon')}\n        />\n      </div>\n    </>\n  );\n}\n\n// Version 6-based custom field\nfunction CustomField(props: FieldProps) {\n  const {\n    fieldPathId: { $id, path },\n    formData,\n    onChange,\n  } = props;\n  const changeHandlerFactory = (fieldName: string) => (event: any) => {\n    onChange(event.target.value, [...path, fieldName]);\n  };\n  return (\n    <>\n      <h4>Location</h4>\n      <div>\n        <label htmlFor={`${$id}-city`}>City</label>\n        <input\n          className='form-control'\n          id={`${$id}-city`}\n          required={false}\n          placeholder=''\n          type='text'\n          value={formData?.city || ''}\n          onChange={changeHandlerFactory('city')}\n        />\n      </div>\n      <div>\n        <label htmlFor={`${$id}-lat`}>Latitude</label>\n        <input\n          className='form-control'\n          id={`${$id}-lat`}\n          type='number'\n          value={formData?.lat || 0}\n          onChange={changeHandlerFactory('lat')}\n        />\n      </div>\n      <div>\n        <label htmlFor={`${$id}-lon`}>Longitude</label>\n        <input\n          className='form-control'\n          id={`${$id}-lon`}\n          type='number'\n          value={formData?.lon || 0}\n          onChange={changeHandlerFactory('lon')}\n        />\n      </div>\n    </>\n  );\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The same change also applies to the ",(0,r.jsx)(n.code,{children:"ErrorSchema"})," object being passed to the ",(0,r.jsx)(n.code,{children:"Form"}),".\nTherefore, if your custom ",(0,r.jsx)(n.code,{children:"Field"})," also updated the ",(0,r.jsx)(n.code,{children:"ErrorSchema"})," to add a new error, now you just need to pass that error as well.\nFinally, the errors are preserved across validations, so if you want to clear an error you passed via ",(0,r.jsx)(n.code,{children:"onChange"}),", you will have to pass ",(0,r.jsx)(n.code,{children:"undefined"})]}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example of a custom ",(0,r.jsx)(n.code,{children:"Field"})," that was updated due to this change:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import { FieldProps } from '@rjsf/utils';\nimport { getDefaultRegistry } from '@rjsf/core';\n\nconst { StringField } = getDefaultRegistry().fields;\n\n// Version 5-based custom field\nfunction StringFieldError(props: FieldProps) {\n  const onChange = (newFormData: any | undefined, es?: ErrorSchema, id?: string) => {\n    let raiseError = es;\n    if (newFormData === 'test') {\n      raiseError = {\n        ...es,\n        __errors: ['Value cannot be \"test\"'],\n      };\n    }\n    props.onChange(newFormData, raiseError, id);\n  };\n  return <StringField {...props} onChange={onChange} />;\n}\n\n// Version 6-based custom field\nfunction StringFieldError(props: FieldProps) {\n  const onChange = (newValue: any | undefined, path: FieldPathList, es?: ErrorSchema, id?: string) => {\n    let raiseError = es;\n    if (newValue === 'test') {\n      raiseError = {\n        __errors: ['Value cannot be \"test\"'],\n      };\n    }\n    props.onChange(newValue, path, raiseError, id);\n  };\n  return <StringField {...props} onChange={onChange} />;\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"fieldpropsidprefix-and-fieldpropsidseparator-refactor",children:"FieldProps.idPrefix and FieldProps.idSeparator refactor"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"idPrefix"})," and ",(0,r.jsx)(n.code,{children:"idSeparator"})," props were refactored from the ",(0,r.jsx)(n.code,{children:"FieldProps"})," interface to the new ",(0,r.jsx)(n.code,{children:"GlobalFormOptions"})," interface,\nIf your custom implementation required either of those props, you can simply obtain them from the ",(0,r.jsx)(n.code,{children:"registry.globalFormOptions"})," variable instead."]}),"\n",(0,r.jsx)(n.h3,{id:"fieldtemplateprops-and-wrapifadditionaltemplateprops-breaking-changes",children:"FieldTemplateProps and WrapIfAdditionalTemplateProps BREAKING CHANGES"}),"\n",(0,r.jsxs)(n.p,{children:["During the conversion of ",(0,r.jsx)(n.code,{children:"ObjectField"})," to a stateless functional component, the ",(0,r.jsx)(n.code,{children:"additionalProperties"}),"-based props in these two interfaces were simplified by replacing two callback-generators with memoized callbacks."]}),"\n",(0,r.jsxs)(n.p,{children:["If you have your own implementation of the ",(0,r.jsx)(n.code,{children:"FieldTemplate"})," and/or ",(0,r.jsx)(n.code,{children:"WrapIfAdditionalTemplate"})," template(s), you will have to rename the props mentioned below with their replacements."]}),"\n",(0,r.jsx)(n.h4,{id:"onkeychange-replacement",children:"onKeyChange replacement"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"onKeyChange: (value: string) => () => void"})," callback-generator function was replaced with the following 2 memoized callbacks, (one is a helper callback, since most of the key renames were triggered off of an input blur):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/** Callback used to handle the changing of an additional property key's name with the new value\n */\nonKeyRename: (newKey: string) => void;\n/** Callback used to handle the changing of an additional property key's name when the input is blurred. The event's\n * target's value will be used as the new value. Its a wrapper callback around `onKeyRename`\n */\nonKeyRenameBlur: (event: FocusEvent<HTMLInputElement>) => void;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"ondroppropertyclick-replacement",children:"onDropPropertyClick replacement"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"onDropPropertyClick: (value: string) => () => void"})," callback-generator function was replaced with the following memoized callback:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/** Callback used to handle the removal of the additionalProperty */\nonRemoveProperty: () => void;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"objectfieldtemplateprops-breaking-changes",children:"ObjectFieldTemplateProps BREAKING CHANGES"}),"\n",(0,r.jsxs)(n.p,{children:["During the conversion of ",(0,r.jsx)(n.code,{children:"ObjectField"})," to a stateless functional component, the ",(0,r.jsx)(n.code,{children:"additionalProperties"}),"-based prop in this interface was simplified by replacing a callback-generator with a memoized callback."]}),"\n",(0,r.jsxs)(n.p,{children:["If you have your own implementation of the ",(0,r.jsx)(n.code,{children:"ObjectFieldTemplate"})," template, you will have to rename the prop mentioned below with its replacement."]}),"\n",(0,r.jsx)(n.h4,{id:"onaddclick-replacement",children:"onAddClick replacement"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"onAddClick: (schema: S) => () => void"})," callback-generator function was replaced with the following memoized callback:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/** Callback to use in order to add an new additionalProperty to the object field  (to be used with\n * additionalProperties and patternProperties)\n */\nonAddProperty: () => void;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"registry-breaking-changes",children:"Registry BREAKING CHANGES"}),"\n",(0,r.jsxs)(n.p,{children:["A new required prop, ",(0,r.jsx)(n.code,{children:"globalFormOptions: GlobalFormOptions"}),", was added to the ",(0,r.jsx)(n.code,{children:"Registry"})," interface.\nThis could affect your tests if you have your own way of creating ",(0,r.jsx)(n.code,{children:"registry"})," objects to test your custom widgets, fields and/or templates.\nIf you are creating ",(0,r.jsx)(n.code,{children:"Registry"})," objects, you simply need to add an empty object to the ",(0,r.jsx)(n.code,{children:"globalFormOptions"})," prop.\nYou may also, provide values for any of the optional props contained within the ",(0,r.jsx)(n.code,{children:"GlobalFormOptions"})," type."]}),"\n",(0,r.jsxs)(n.p,{children:["The definition of the ",(0,r.jsx)(n.code,{children:"GlobalFormOptions"})," object is:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/** The set of options from the `Form` that will be available on the `Registry` for use in everywhere the `registry` is\n * available.\n */\nexport type GlobalFormOptions = {\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`. This prop is passed to the `toFieldPathId()` function within the RJSF field implementations.\n   */\n  readonly idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids; Default is `_`. This prop is passed to the `toFieldPathId()` function within the RJSF field implementations.\n   */\n  readonly idSeparator?: string;\n  /** The component update strategy used by the Form and its fields for performance optimization */\n  readonly experimental_componentUpdateStrategy?: 'customDeep' | 'shallow' | 'always';\n  /** Optional function to generate custom HTML name attributes for form elements. Receives the field path segments\n   * and element type (object or array), and returns a custom name string. This allows backends like PHP/Rails\n   * (`root[tasks][0][title]`) or Django (`root__tasks-0__title`) to receive form data in their expected format.\n   */\n  readonly nameGenerator?: NameGeneratorFunction;\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To help support this change for test writers, a new ",(0,r.jsx)(n.code,{children:"getTestRegistry()"})," function has been provided in ",(0,r.jsx)(n.code,{children:"@rjsf/core"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"templates-breaking-changes",children:"Templates BREAKING CHANGES"}),"\n",(0,r.jsx)(n.h4,{id:"arrayfieldtemplateitemtype-renamed",children:"ArrayFieldTemplateItemType renamed"}),"\n",(0,r.jsxs)(n.p,{children:["The type ",(0,r.jsx)(n.code,{children:"ArrayFieldTemplateItemType"})," was renamed to ",(0,r.jsx)(n.code,{children:"ArrayFieldItemTemplateProps"})," type, which matches the template properties naming pattern."]}),"\n",(0,r.jsxs)(n.p,{children:["Also changed the ",(0,r.jsx)(n.code,{children:"key: string"})," prop to ",(0,r.jsx)(n.code,{children:"itemKey: string"})," to avoid a name collision with React"]}),"\n",(0,r.jsx)(n.h4,{id:"arrayfielditemtemplate-breaking-changes",children:"ArrayFieldItemTemplate BREAKING CHANGES"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ArrayFieldItemTemplateProps"})," was refactored to extract the following props into out a new ",(0,r.jsx)(n.code,{children:"ArrayFieldItemButtonsTemplateProps"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"canAdd"}),": A boolean value stating whether new items can be added to the array."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasCopy"}),": A boolean value stating whether the array item can be copied."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasMoveDown"}),": A boolean value stating whether the array item can be moved down."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasMoveUp"}),": A boolean value stating whether the array item can be moved up."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasRemove"}),": A boolean value stating whether the array item can be removed."]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.del,{children:[(0,r.jsx)(n.code,{children:"onAddIndexClick: (index) => (event?) => void"}),": Returns a function that adds a new item at ",(0,r.jsx)(n.code,{children:"index"}),"."]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.del,{children:[(0,r.jsx)(n.code,{children:"onCopyIndexClick: (index: number) => (event?: any) => void;"}),": Returns a function that copies the item at ",(0,r.jsx)(n.code,{children:"index"})," into the position at ",(0,r.jsx)(n.code,{children:"index + 1"}),"."]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.del,{children:[(0,r.jsx)(n.code,{children:"onDropIndexClick: (index) => (event?) => void"}),": Returns a function that removes the item at ",(0,r.jsx)(n.code,{children:"index"}),"."]})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.del,{children:[(0,r.jsx)(n.code,{children:"onReorderClick: (index, newIndex) => (event?) => void"}),": Returns a function that swaps the items at ",(0,r.jsx)(n.code,{children:"index"})," with ",(0,r.jsx)(n.code,{children:"newIndex"}),"."]})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In addition to this refactor, the conversion of the ",(0,r.jsx)(n.code,{children:"ArrayField"})," template to functional components caused the replacement of the 4 callback-generator functions with 5 memoizable functions."]}),"\n",(0,r.jsx)(n.h5,{id:"onaddindexclick-replacement",children:"onAddIndexClick replacement"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"onAddIndexClick: (index) => (event?) => void"})," callback-generator function was replaced with the following memoized callback:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/** Callback function that adds a new item below this item */\nonAddItem: (event?: any) => void;\n"})}),"\n",(0,r.jsx)(n.h5,{id:"oncopyindexclick-replacement",children:"onCopyIndexClick replacement"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"onCopyIndexClick: (index: number) => (event?: any) => void;"})," callback-generator function was replaced with a simpler, memoized callback:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/** Callback function that copies this item below itself */\nonCopyItem: (event?: any) => void;\n"})}),"\n",(0,r.jsx)(n.h5,{id:"ondropindexclick-replacement",children:"onDropIndexClick replacement"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"onDropIndexClick: (index) => (event?) => void"})," callback-generator function was replaced with the following memoized callback:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/** Callback function that removes the item from the list */\nonRemoveItem: (event?: any) => void;\n"})}),"\n",(0,r.jsx)(n.h5,{id:"onreorderclick-replacement",children:"onReorderClick replacement"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"onReorderClick: (index, newIndex) => (event?) => void"})," callback-generator function was replaced with the following 2 memoized callbacks:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"/** Callback function that moves the item up one spot in the list */\nonMoveUpItem: (event?: any) => void;\n/** Callback function that moves the item down one spot in the list */\nonMoveDownItem: (event?: any) => void;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["A new ",(0,r.jsx)(n.code,{children:"buttonsProps"})," prop was added of the type ",(0,r.jsx)(n.code,{children:"ArrayFieldItemButtonsTemplateProps"})]}),"\n",(0,r.jsxs)(n.p,{children:["This new type was then used to create a new ",(0,r.jsx)(n.code,{children:"ArrayFieldItemButtonsTemplate"})," in the ",(0,r.jsx)(n.code,{children:"Registry.templates"}),".\nSee ",(0,r.jsx)(n.a,{href:"/react-jsonschema-form/docs/advanced-customization/custom-templates#arrayfielditembuttontemplate",children:"ArrayFieldItemButtonTemplate"})]}),"\n",(0,r.jsxs)(n.p,{children:["If you have implemented your own ",(0,r.jsx)(n.code,{children:"ArrayFieldItemTemplate"})," or ",(0,r.jsx)(n.code,{children:"ArrayField"})," then you will have to account for these changes."]}),"\n",(0,r.jsx)(n.h4,{id:"arrayfieldtemplate-breaking-change",children:"ArrayFieldTemplate BREAKING CHANGE"}),"\n",(0,r.jsxs)(n.p,{children:["In order to support the conversion of ",(0,r.jsx)(n.code,{children:"ArrayField"})," to functional components, the ",(0,r.jsx)(n.code,{children:"items"})," property was changed from an\narray of ",(0,r.jsx)(n.code,{children:"ArrayFieldItemTemplateProps"})," information to an array of React elements. These elements are result of the ",(0,r.jsx)(n.code,{children:"ArrayField"}),"\nactually rendering the ",(0,r.jsx)(n.code,{children:"ArrayFieldItemTemplate"})," directly, rather than deferring it the ",(0,r.jsx)(n.code,{children:"ArrayFieldTemplate"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["If you previously provided a custom ",(0,r.jsx)(n.code,{children:"ArrayFieldTemplate"})," to do the full rendering of your arrays, now you will have to\nseparate the logic of generating the items into your own custom ",(0,r.jsx)(n.code,{children:"ArrayFieldItemTemplate"}),". For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// v5 ArrayFieldTemplate\n\nimport { ArrayFieldTemplateItemType, ArrayFieldTemplateProps } from '@rjsf/utils';\n\nfunction CustomArrayFieldTemplate(props: ArrayFieldTemplateProps) {\n  const { items, canAdd, onAddClick } = props;\n  return (\n    <div className='array'>\n      {items &&\n        items.map((element: ArrayFieldTemplateItemType) => (\n          <div key={element.key} className='array-item' data-rjsf-itemkey={element.key}>\n            <div>{element.children}</div>\n            {(element.hasMoveUp || element.hasMoveDown) && (\n              <button\n                className='array-item-move-down'\n                onClick={element.onReorderClick(element.index, element.index + 1)}\n              >\n                Down\n              </button>\n            )}\n            {(element.hasMoveUp || element.hasMoveDown) && (\n              <button className='array-item-move-up' onClick={element.onReorderClick(element.index, element.index - 1)}>\n                Up\n              </button>\n            )}\n            {element.hasCopy && (\n              <button className='array-item-copy' onClick={element.onCopyIndexClick(element.index)}>\n                Copy\n              </button>\n            )}\n            {element.hasRemove && (\n              <button className='array-item-remove' onClick={element.onDropIndexClick(element.index)}>\n                Remove\n              </button>\n            )}\n            <hr />\n          </div>\n        ))}\n      {canAdd && (\n        <div className='array-item-add'>\n          <button onClick={onAddClick} type='button'>\n            Add New\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// v6 ArrayFieldTemplate and ArrayFieldItemTemplate (including other v6 changes mentioned in other sections)\n\nimport { ArrayFieldItemTemplateProps, ArrayFieldTemplateProps } from '@rjsf/utils';\n\nfunction CustomArrayFieldItemTemplate(props: ArrayFieldItemTemplateProps) {\n  const { children, buttonProps, itemKey } = props;\n  return (\n    <div className='rjsf-array-item' data-rjsf-itemkey={itemKey}>\n      <div>{children}</div>\n      {(buttonsProps.hasMoveUp || buttonsProps.hasMoveDown) && (\n        <button className='rjsf-array-item-move-down' onClick={props.buttonsProps.onMoveDownItem}>\n          Down\n        </button>\n      )}\n      {(buttonsProps.hasMoveUp || buttonsProps.hasMoveDown) && (\n        <button className='rjsf-array-item-move-up' onClick={props.buttonsProps.onMoveUpItem}>\n          Up\n        </button>\n      )}\n      {buttonsProps.hasCopy && (\n        <button className='rjsf-array-item-copy' onClick={buttonsProps.onCopyItem}>\n          Copy\n        </button>\n      )}\n      {buttonsProps.hasRemove && (\n        <button className='rjsf-array-item-remove' onClick={buttonsProps.onRemoveItem}>\n          Remove\n        </button>\n      )}\n      <hr />\n    </div>\n  );\n}\n\nfunction CustomArrayFieldTemplate(props: ArrayFieldTemplateProps) {\n  const { items, canAdd, onAddClick } = props;\n  return (\n    <div className='array'>\n      {items}\n      {canAdd && (\n        <div className='rjsf-array-item-add'>\n          <button onClick={onAddClick} type='button'>\n            Add New\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["NOTE: the example above could also have implemented an ",(0,r.jsx)(n.code,{children:"ArrayFieldItemButtonsTemplate"})," for the ",(0,r.jsx)(n.code,{children:"buttonProps"})," related code."]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"potential-breaking-change",children:"Potential BREAKING CHANGE"}),"\n",(0,r.jsxs)(n.p,{children:["This template was also updated to support the new ",(0,r.jsx)(n.a,{href:"#optional-data-controls",children:"Optional Data Controls"})," feature by adding a new ",(0,r.jsx)(n.code,{children:"optionalDataControl"})," prop to the ",(0,r.jsx)(n.code,{children:"ArrayFieldTemplateProps"})," interface."]}),"\n",(0,r.jsxs)(n.p,{children:["If you have your own implementation of ",(0,r.jsx)(n.code,{children:"ArrayFieldTemplate"})," and want to support this new feature, please refer to any of the ",(0,r.jsx)(n.code,{children:"ArrayFieldTemplate"})," implementation for whatever theme you are using and pick up the changes."]}),"\n",(0,r.jsx)(n.h4,{id:"arrayfieldtitletemplate-potential-breaking-change",children:"ArrayFieldTitleTemplate POTENTIAL BREAKING CHANGE"}),"\n",(0,r.jsxs)(n.p,{children:["This template was updated to support the new ",(0,r.jsx)(n.a,{href:"#optional-data-controls",children:"Optional Data Controls"})," feature by adding a new ",(0,r.jsx)(n.code,{children:"optionalDataControl"})," prop to the ",(0,r.jsx)(n.code,{children:"ArrayFieldTitleProps"})," interface."]}),"\n",(0,r.jsxs)(n.p,{children:["If you have your own implementation of ",(0,r.jsx)(n.code,{children:"ArrayFieldTitleTemplate"})," and want to support this new feature, please refer to the ",(0,r.jsx)(n.code,{children:"ArrayFieldTitleTemplate"})," implementation for ",(0,r.jsx)(n.code,{children:"@rjsf/core"})," or whatever theme you are using and pick up the changes."]}),"\n",(0,r.jsx)(n.h4,{id:"gridtemplate",children:"GridTemplate"}),"\n",(0,r.jsxs)(n.p,{children:["A new, theme-dependent template ",(0,r.jsx)(n.code,{children:"GridTemplate"})," was added to support the new layout feature and must be provided if you are building your own ",(0,r.jsx)(n.code,{children:"registry.templates"})," rather than overloading them via the ",(0,r.jsx)(n.code,{children:"templates"})," props."]}),"\n",(0,r.jsx)(n.h4,{id:"multischemafieldtemplate",children:"MultiSchemaFieldTemplate"}),"\n",(0,r.jsxs)(n.p,{children:["This new template was created to extract styling applied to the ",(0,r.jsx)(n.code,{children:"MultiSchemaField"})," component in the ",(0,r.jsx)(n.code,{children:"@rjsf/core"})," package."]}),"\n",(0,r.jsxs)(n.p,{children:["If you have styled your form using the following classNames and you do NOT use the ",(0,r.jsx)(n.code,{children:"@rjsf/core"})," theme, you may need to adjust your styles, as they may have been removed from your theme: ",(0,r.jsx)(n.code,{children:"panel"}),", ",(0,r.jsx)(n.code,{children:"panel-default"}),", ",(0,r.jsx)(n.code,{children:"panel-body"}),", ",(0,r.jsx)(n.code,{children:"form-group"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"objectfieldtemplate-potential-breaking-change",children:"ObjectFieldTemplate POTENTIAL BREAKING CHANGE"}),"\n",(0,r.jsxs)(n.p,{children:["This template was updated to support the new ",(0,r.jsx)(n.a,{href:"#optional-data-controls",children:"Optional Data Controls"})," feature by adding a new ",(0,r.jsx)(n.code,{children:"optionalDataControl"})," prop to the ",(0,r.jsx)(n.code,{children:"ObjectFieldTemplateProps"})," interface."]}),"\n",(0,r.jsxs)(n.p,{children:["If you have your own implementation of ",(0,r.jsx)(n.code,{children:"ObjectFieldTemplate"})," and want to support this new feature, please refer to the ",(0,r.jsx)(n.code,{children:"ObjectFieldTemplate"})," implementation for whatever theme you are using and pick up the changes."]}),"\n",(0,r.jsx)(n.h4,{id:"optionaldatacontrolstemplate-potential-breaking-change",children:"OptionalDataControlsTemplate POTENTIAL BREAKING CHANGE"}),"\n",(0,r.jsxs)(n.p,{children:["This new template was created to support the new ",(0,r.jsx)(n.a,{href:"#optional-data-controls",children:"Optional Data Controls"})," feature."]}),"\n",(0,r.jsx)(n.p,{children:"If you are implementing your own theme you may need to add this new template if you anticipate supporting this new feature."}),"\n",(0,r.jsx)(n.h4,{id:"titlefieldtemplate-potential-breaking-change",children:"TitleFieldTemplate POTENTIAL BREAKING CHANGE"}),"\n",(0,r.jsxs)(n.p,{children:["This template was updated to support the new ",(0,r.jsx)(n.a,{href:"#optional-data-controls",children:"Optional Data Controls"})," feature by adding a new ",(0,r.jsx)(n.code,{children:"optionalDataControl"})," prop to the ",(0,r.jsx)(n.code,{children:"TitleFieldProps"})," interface."]}),"\n",(0,r.jsxs)(n.p,{children:["If you have your own implementation of ",(0,r.jsx)(n.code,{children:"TitleFieldTemplate"})," and want to support this new feature, please refer to the ",(0,r.jsx)(n.code,{children:"TitleFieldTemplate"})," implementation for whatever theme you are using and pick up the changes."]}),"\n",(0,r.jsx)(n.h4,{id:"schemautilstype",children:"SchemaUtilsType"}),"\n",(0,r.jsx)(n.p,{children:"Five new functions were added to this type, so if you have your own implementation of this type, you will need to add them to yours.\nThe following new functions match the 5 new validator-based utility API functions mentioned below:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"findFieldInSchema(path: string | string[], schema: S, formData?: T): FoundFieldType<S>"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"findSelectedOptionInXxxOf(schema: S, fallbackField: string, xxx: 'anyOf' | "}),"oneOf",(0,r.jsx)(n.code,{children:", formData?: T): S | undefined;"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"getFromSchema(schema: S, path: string | string[], defaultValue: T): T;"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"getFromSchema(schema: S, path: string | string[], defaultValue: S): S;"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"getFromSchema(schema: S, path: string | string[], defaultValue: T | S): S | T;"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In addition the ",(0,r.jsx)(n.code,{children:"toIdSchema()"})," function was removed on this type in concert with the ",(0,r.jsx)(n.code,{children:"toIdSchema()"})," function removal, so update your implementation to remove this as well."]}),"\n",(0,r.jsx)(n.h3,{id:"removed-deprecations",children:"Removed deprecations"}),"\n",(0,r.jsx)(n.p,{children:"The following deprecations were removed from the code base in v6"}),"\n",(0,r.jsx)(n.h4,{id:"formpropsacceptcharset",children:"FormProps.acceptcharset"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"acceptcharset"})," prop on ",(0,r.jsx)(n.code,{children:"Form"})," was removed. Use the ",(0,r.jsx)(n.code,{children:"acceptCharset"})," prop instead. I.e.:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"<Form acceptCharset='ISO-8859-1' />\n"})}),"\n",(0,r.jsx)(n.h4,{id:"getmatchingoption",children:"getMatchingOption()"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"getMatchingOption()"})," function in ",(0,r.jsx)(n.code,{children:"@rjsf/utils"})," was removed. Use the ",(0,r.jsx)(n.code,{children:"getFirstMatchingOption()"})," function instead.\nI.e.:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { getFirstMatchingOption, RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  // your schema goes here\n};\n\nconst formData = {\n  /* your form data goes here */\n};\nconst options: RJSFSchema[] = [\n  /* your options extracted from the schema go here */\n];\n\nconst option = getFirstMatchingOption(validator, formData, options, schema);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"schemautilstypegetmatchingoption",children:"SchemaUtilsType.getMatchingOption()"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"getMatchingOption()"})," function in the ",(0,r.jsx)(n.code,{children:"SchemaUtilsType"})," was removed. Use the ",(0,r.jsx)(n.code,{children:"getFirstMatchingOption()"})," funciton on\nthe type instead. I.e.:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createSchemaUtils, RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  // your schema goes here\n};\n\nconst formData = {\n  /* your form data goes here */\n};\nconst options: RJSFSchema[] = [\n  /* your options extracted from the schema go here */\n];\nconst schemaUtils = createSchemaUtils(validator, schema);\n\nconst option = schemaUtils.getFirstMatchingOption(formData, options);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"mergevalidationdata",children:"mergeValidationData()"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"mergeValidationData()"})," function from ",(0,r.jsx)(n.code,{children:"@rjsf/utils"})," was removed. Use the ",(0,r.jsx)(n.code,{children:"validationDataMerge()"})," function instead.\nI.e.:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { validationDataMerge, ValidationData, ErrorSchema } from '@rjsf/utils';\n\nconst validationData: ValidationData = {\n  errors: [\n    /* Your validation errors go here */\n  ],\n  errorSchema: {\n    /* Your error schema goes here */\n  },\n};\n\nconst additionalErrorSchema: ErrorSchema = {\n  /* Your additional error schema goes here */\n};\n\nconst merged = validationDataMerge(validationData, additionalErrorSchema);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"schemautilstypemergevalidationdata",children:"SchemaUtilsType.mergeValidationData()"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"mergeValidationData()"})," function in the ",(0,r.jsx)(n.code,{children:"SchemaUtilsType"})," was removed. Use the standalone ",(0,r.jsx)(n.code,{children:"validationDataMerge()"}),"\nfunction instead. I.e.:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { toErrorList } from '@rjsf/utils';\n\nconst validationData: ValidationData = {\n  errors: [\n    /* Your validation errors go here */\n  ],\n  errorSchema: {\n    /* Your error schema goes here */\n  },\n};\n\nconst additionalErrorSchema: ErrorSchema = {\n  /* Your additional error schema goes here */\n};\n\nconst merged = validationDataMerge(validationData, additionalErrorSchema);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"validatortypetoerrorlist",children:"ValidatorType.toErrorList()"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"toErrorList()"})," function on the ",(0,r.jsx)(n.code,{children:"ValidatorType"})," interface was removed. Use the standalone ",(0,r.jsx)(n.code,{children:"toErrorList()"})," function\nfrom ",(0,r.jsx)(n.code,{children:"@rjsf/utils"})," instead. I.e.:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { validationDataMerge, ErrorSchema, RJSFValidationError, toErrorList } from '@rjsf/utils';\n\nconst errorSchema: ErrorSchema = {\n  /* Your error schema goes here */\n};\n\nconst validationErrors: RJSFValidationError[] = toErrorList(errorSchema);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"rjsf_additonal_properties_flag",children:"RJSF_ADDITONAL_PROPERTIES_FLAG"}),"\n",(0,r.jsxs)(n.p,{children:["The constant ",(0,r.jsx)(n.code,{children:"RJSF_ADDITONAL_PROPERTIES_FLAG"})," was removed from ",(0,r.jsx)(n.code,{children:"@rjsf/utils"}),". Use the ",(0,r.jsx)(n.code,{children:"RJSF_ADDITIONAL_PROPERTIES_FLAG"}),"\nconstant instead. I.e.:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { RJSF_ADDITIONAL_PROPERTIES_FLAG } from '@rjsf/utils';\n"})}),"\n",(0,r.jsx)(n.h4,{id:"uischemaclassnames",children:"UiSchema.classNames"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"classNames"})," notation on ",(0,r.jsx)(n.code,{children:"UiSchema"})," was removed. Use the ",(0,r.jsx)(n.code,{children:"ui:classNames"})," notation instead. I.e.:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "someField": {\n    "ui:classNames": "someCustomClass"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"schemaenumnames",children:"schema.enumNames"}),"\n",(0,r.jsxs)(n.p,{children:["The custom ",(0,r.jsx)(n.code,{children:"enumNames"})," property support on a JSON Schema that RJSF invented has been removed. Please use the ",(0,r.jsx)(n.code,{children:"UiSchema"}),"\nreplacement, ",(0,r.jsx)(n.code,{children:"ui:enumNames"})," instead. I.e.:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { UiSchema, RJSFSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    attendance: {\n      title: 'How did you attend the event?',\n      enum: ['person', 'phone', 'video'],\n    },\n    rating: {\n      title: 'How would you rate this event?',\n      enum: ['0', '1', '2', '3', '4'],\n    },\n  },\n};\n\nconst uiSchema: UiSchema = {\n  attendance: {\n    'ui:enumNames': ['I joined in person', 'I called in using the phone number', 'I joined using the video link'],\n  },\n  rating: {\n    'ui:enumNames': [\"I did't like it\", 'It was meh', 'It was ok', 'I liked it', 'I loved it'],\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"ui:enumNames"})," in the ",(0,r.jsx)(n.code,{children:"UiSchema"})," instead."]}),"\n",(0,r.jsx)(n.h3,{id:"other-breaking-changes",children:"Other BREAKING CHANGES"}),"\n",(0,r.jsx)(n.h4,{id:"primitive-field-handling-in-oneofanyof-schemas",children:"Primitive field handling in oneOf/anyOf schemas"}),"\n",(0,r.jsxs)(n.p,{children:["A bug fix was implemented that changes how primitive fields (boolean, string, number, etc.) are handled when switching between oneOf/anyOf schema options with ",(0,r.jsx)(n.code,{children:'mergeDefaultsIntoFormData: "useDefaultIfFormDataUndefined"'}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Previous (buggy) behavior"}),": Undefined primitive fields were incorrectly set to empty objects ",(0,r.jsx)(n.code,{children:"{}"})," when switching between schema variants."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"New (correct) behavior"}),": Undefined primitive fields now remain ",(0,r.jsx)(n.code,{children:"undefined"})," or receive proper default values according to their type when switching between schema variants."]}),"\n",(0,r.jsxs)(n.p,{children:["This change fixes ",(0,r.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/4709",children:"#4709"})," and was implemented in ",(0,r.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/pull/4710",children:"#4710"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Impact"}),": If your application was incorrectly relying on undefined primitive fields becoming ",(0,r.jsx)(n.code,{children:"{}"})," objects, you may need to update your form validation or data processing logic to handle proper primitive values or ",(0,r.jsx)(n.code,{children:"undefined"})," instead."]}),"\n",(0,r.jsx)(n.h4,{id:"schemafield-removed-bootstrap-3-classes",children:"SchemaField removed Bootstrap 3 classes"}),"\n",(0,r.jsxs)(n.p,{children:["In fixing ",(0,r.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/2280",children:"#2280"}),", the following ",(0,r.jsx)(n.code,{children:"Bootstrap 3"})," classes\n(",(0,r.jsx)(n.code,{children:"form-group"}),", ",(0,r.jsx)(n.code,{children:"has-error"})," and ",(0,r.jsx)(n.code,{children:"has-danger"})," error classes) were removed from the ",(0,r.jsx)(n.code,{children:"classNames"})," prop passed down to the\n",(0,r.jsx)(n.code,{children:"FieldTemplate"}),". They were instead moved into the ",(0,r.jsx)(n.code,{children:"core"})," theme's ",(0,r.jsx)(n.code,{children:"WrapIfAdditionalTemplate"})," to ensure that theme was\nunchanged."]}),"\n",(0,r.jsxs)(n.p,{children:["Additionally, the Bootstrap 3 classes ",(0,r.jsx)(n.code,{children:"panel"}),", ",(0,r.jsx)(n.code,{children:"panel-default"}),", ",(0,r.jsx)(n.code,{children:"panel-body"}),", and ",(0,r.jsx)(n.code,{children:"form-group"})," were removed from the\n",(0,r.jsx)(n.code,{children:"MultiSchemaField"})," component in the ",(0,r.jsx)(n.code,{children:"@rjsf/core"})," package, and moved into the ",(0,r.jsx)(n.code,{children:"core"})," theme's ",(0,r.jsx)(n.code,{children:"MultiSchemaFieldTemplate"}),"\nto ensure that the theme was unchanged."]}),"\n",(0,r.jsxs)(n.p,{children:["As a result, the themes (other than ",(0,r.jsx)(n.code,{children:"core"}),") will no longer render these classes."]}),"\n",(0,r.jsxs)(n.p,{children:["If you use a non-",(0,r.jsx)(n.code,{children:"core"})," theme and were relying on them for in your application's styling or behavior (via css overrides\nperhaps), then you can still use the non-",(0,r.jsx)(n.code,{children:"Bootstrap 3"})," RJSF marker class (see below) or your specific theme's error classes."]}),"\n",(0,r.jsx)(n.h4,{id:"prefixed-rjsf-template-and-field-marker-classes",children:"Prefixed RJSF template and field marker classes"}),"\n",(0,r.jsxs)(n.p,{children:["Many of the ",(0,r.jsx)(n.code,{children:"core"})," RJSF templates and field implementations that are shared across all themes were updated to add the\n",(0,r.jsx)(n.code,{children:"rjsf-"})," prefix to the marker classes that are being added to the rendered HTML. The following table highlights the old\nand new marker classes. If you were relying on any of these classes, simply do a rename:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"old marker class"}),(0,r.jsx)(n.th,{children:"new marker class"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"field"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-field"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"field-<schema.type>"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-field-<schema.type>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"field-array"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-field-array"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"field-array-of-<schema.type>"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-field-array-of-<schema.type>"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"field-array-fixed-items"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-field-array-fixed-items"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"field-error"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-field-error"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"field-hidden"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-field-hidden"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"array-item"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-array-item"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"config-error"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-config-error"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"array-item-add"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-array-item-add"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"array-item-copy"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-array-item-copy"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"array-item-move-down"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-array-item-move-down"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"array-item-move-up"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-array-item-move-up"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"array-item-remove"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-array-item-remove"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"object-property-expand"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-object-property-expand"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"object-property-remove"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rjsf-object-property-remove"})})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"optionslist",children:"optionsList"}),"\n",(0,r.jsxs)(n.p,{children:["The generics ordering on the ",(0,r.jsx)(n.code,{children:"optionsList()"})," function was changed from ",(0,r.jsx)(n.code,{children:"<S, T, F>"})," to ",(0,r.jsx)(n.code,{children:"<T, S, F>"})," to be consistent with the rest of the APIs."]}),"\n",(0,r.jsx)(n.h2,{id:"new-features",children:"New Features"}),"\n",(0,r.jsx)(n.h3,{id:"new-types",children:"New types"}),"\n",(0,r.jsxs)(n.p,{children:["The following new types were added to ",(0,r.jsx)(n.code,{children:"@rjsf/utils"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ArrayFieldItemTemplateProps"}),": The properties of each element in the ArrayFieldTemplateProps.items array. NOTE: ",(0,r.jsx)(n.code,{children:"ArrayFieldTemplateItemType"})," is an alias to this type"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ContainerFieldTemplateProps"}),": The common properties of the two container templates: ",(0,r.jsx)(n.code,{children:"ArrayFieldTemplateProps"})," and ",(0,r.jsx)(n.code,{children:"ObjectFieldTemplateProps"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FieldPathList"})," - The list of path elements that represents where in the schema a field is located"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FieldPathId"})," - Type describing an id and path used for a field"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FoundFieldType"}),": The interface for the return value of the ",(0,r.jsx)(n.code,{children:"findFieldInSchema"})," function"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GlobalFormOptions"}),": The set of options from the ",(0,r.jsx)(n.code,{children:"Form"})," that will be available on the ",(0,r.jsx)(n.code,{children:"Registry"})," for use in everywhere the ",(0,r.jsx)(n.code,{children:"registry"})," is available."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GridTemplateProps"}),": The properties that are passed to a ",(0,r.jsx)(n.code,{children:"GridTemplate"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MultiSchemaFieldTemplateProps"}),": The properties that are passed to a ",(0,r.jsx)(n.code,{children:"MultiSchemaFieldTemplate"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"OptionalDataControlsTemplateProps"}),": The properties that are passed to a OptionalDataControlsTemplate implementation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TestIdShape"}),": The interface for the test ID proxy objects that are returned by the ",(0,r.jsx)(n.code,{children:"getTestId"})," utility function"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"new-non-validator-utility-functions",children:"New non-validator utility functions"}),"\n",(0,r.jsxs)(n.p,{children:["Many new or formerly internally private utility functions are available in ",(0,r.jsx)(n.code,{children:"@rjsf/utils"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"buttonId(id: FieldPathId | string, btn: 'add' | 'copy' | 'moveDown' | 'moveUp' | 'remove')"}),": Generates consistent ids for RJSF buttons"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getTestIds(): TestIdShape"}),": Returns an object of test IDs that can only be used in test mode, helpful for writing unit tests for React components"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hashObject(object: unknown): string"}),": Stringifies an ",(0,r.jsx)(n.code,{children:"object"})," and returns the hash of the resulting string"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hashString(string: string): string"}),": Hashes a string into hex format"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isFormDataAvailable<T = any>(formData?: T)<T = any>(formData?: T): boolean"}),": Determines whether the given ",(0,r.jsx)(n.code,{children:"formData"})," represents valid form data, such as a primitive type, an array, or a non-empty object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isRootSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(registry: Registry<T, S, F>, schemaToCompare: S): boolean"}),": Helper to check whether a JSON schema object is the root schema"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"lookupFromFormContext<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(regOrFc: Registry<T, S, F> | Registry<T, S, F>['formContext'], toLookup: string, fallback?: unknown)"}),": Given a React JSON Schema Form registry or formContext object, return the value associated with ",(0,r.jsx)(n.code,{children:"toLookup"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optionalControlsId(id: FieldPathId | string, element: 'Add' | 'Msg' | 'Remove')"}),": Return a consistent ",(0,r.jsx)(n.code,{children:"id"})," for the optional data controls ",(0,r.jsx)(n.code,{children:"element"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"shouldRenderOptionalField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(registry: Registry<T, S, F>, schema: S, required: boolean, uiSchema?: UiSchema<T, S, F>): boolean"}),": Determines if this field should be rendered with the Optional Data Controls UI."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sortedJSONStringify(object: unknown): string"}),": Stringifies an ",(0,r.jsx)(n.code,{children:"object"}),", sorts object fields in consistent order before stringifying it."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"toFieldPathId(fieldPath: string | number, globalFormOptions: GlobalFormOptions, parentPath?: FieldPathId | FieldPathList, isMultiValue?: boolean)"}),": Constructs the ",(0,r.jsx)(n.code,{children:"FieldPathId"})," for ",(0,r.jsx)(n.code,{children:"fieldPath"})," and the optional ",(0,r.jsx)(n.code,{children:"parentPath"}),", using ",(0,r.jsx)(n.code,{children:"globalFormOptions"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"useDeepCompareMemo<T = unknown>(newValue: T): T"}),": Hook that stores and returns a ",(0,r.jsx)(n.code,{children:"T"})," value. If ",(0,r.jsx)(n.code,{children:"newValue"})," is the same as the stored one, then the stored one is returned, otherwise ",(0,r.jsx)(n.code,{children:"newValue"})," is stored and returned"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"new-validator-based-utility-functions",children:"New validator-based utility functions"}),"\n",(0,r.jsxs)(n.p,{children:["Three new validator-based utility functions are available in ",(0,r.jsx)(n.code,{children:"@rjsf/utils"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"findFieldInSchema<T = undefined, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(validator: ValidatorType<T, S, F>, rootSchema: S, path: string | string[], schema: S, formData?: T, experimental_customMergeAllOf?: Experimental_CustomMergeAllOf<S>): FoundFieldType<S>"}),": Finds the field specified by the ",(0,r.jsx)(n.code,{children:"path"})," within the root or recursed ",(0,r.jsx)(n.code,{children:"schema"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"findSelectedOptionInXxxOf<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(validator: ValidatorType<T, S, F>, rootSchema: S, schema: S, fallbackField: string,xxx: 'anyOf' | 'oneOf', formData?: T, experimental_customMergeAllOf?: Experimental_CustomMergeAllOf<S>): S | undefined"}),": Finds the option that matches the selector field in the ",(0,r.jsx)(n.code,{children:"schema"})," or undefined if nothing is selected"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getFromSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(validator: ValidatorType<T, S, F>, rootSchema: S, schema: S, path: string | string[], defaultValue: T | S, experimental_customMergeAllOf?: Experimental_CustomMergeAllOf<S>): T | S"}),": Helper that acts like lodash's ",(0,r.jsx)(n.code,{children:"get"})," but additionally retrieves ",(0,r.jsx)(n.code,{children:"$ref"}),"s as needed to get the path for schemas"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"changes-to-existing-utility-functions",children:"Changes to existing utility functions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getDefaultFormState()"}),": Added an optional ",(0,r.jsx)(n.code,{children:"initialDefaultsGenerated"})," boolean flag that indicates whether or not initial defaults have been generated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"retrieveSchema()"}),": Added an optional ",(0,r.jsx)(n.code,{children:"resolveAnyOfOrOneOfRefs"})," boolean flag that causes the internal ",(0,r.jsx)(n.code,{children:"resolveAllSchemas()"})," to resolve ",(0,r.jsx)(n.code,{children:"$ref"}),"s inside of the options of ",(0,r.jsx)(n.code,{children:"anyOf"}),"/",(0,r.jsx)(n.code,{children:"oneOf"})," schemas","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This new optional flag was added to the ",(0,r.jsx)(n.code,{children:"SchemaUtilsType"})," interface's version of ",(0,r.jsx)(n.code,{children:"retrieveSchema()"})," as well."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validationDataMerge()"}),": Added optional ",(0,r.jsx)(n.code,{children:"preventDuplicates"})," boolean flag that causes the ",(0,r.jsx)(n.code,{children:"mergeObjects()"})," call to receive ",(0,r.jsx)(n.code,{children:"preventDuplicates"})," instead of ",(0,r.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"optional-data-controls",children:"Optional Data Controls"}),"\n",(0,r.jsx)(n.p,{children:"RJSF 6.x introduces a new feature that allows developers to provide a condensed UI for users who don't care to enter an optional list of array items or set of optional object fields."}),"\n",(0,r.jsxs)(n.p,{children:["See the documentation for ",(0,r.jsx)(n.a,{href:"/react-jsonschema-form/docs/api-reference/uiSchema#enableoptionaldatafieldfortype",children:"enableOptionalDataFieldForType"})," for more information."]}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-ui-schema-for-array-items",children:"Dynamic UI Schema for Array Items"}),"\n",(0,r.jsxs)(n.p,{children:["RJSF 6.x introduces a new feature that allows dynamic UI schema generation for array items.\nThe ",(0,r.jsx)(n.code,{children:"items"})," property in a ",(0,r.jsx)(n.code,{children:"uiSchema"})," can now accept a function that returns a UI schema based on the array item's data, index, and form context."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const uiSchema: UiSchema = {\n  myArrayField: {\n    items: (itemData, index, formContext) => {\n      // Return different UI schemas based on item data\n      if (itemData?.type === 'special') {\n        return { 'ui:widget': 'textarea' };\n      }\n      return { 'ui:widget': 'text' };\n    },\n  },\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This feature is fully backward compatible - existing forms using object-based ",(0,r.jsx)(n.code,{children:"uiSchema.items"})," will continue to work without changes.\nSee the ",(0,r.jsx)(n.a,{href:"/react-jsonschema-form/docs/api-reference/dynamic-ui-schema-examples",children:"Dynamic UI Schema Examples"})," documentation for comprehensive examples and usage patterns."]}),"\n",(0,r.jsxs)(n.h3,{id:"custom-field-name-generation",children:["Custom field ",(0,r.jsx)(n.code,{children:"name"})," generation"]}),"\n",(0,r.jsxs)(n.p,{children:["RJSF 6.x adds support for customizing how HTML ",(0,r.jsx)(n.code,{children:"name"})," attributes are generated for form fields via the new ",(0,r.jsx)(n.a,{href:"/react-jsonschema-form/docs/api-reference/form-props#namegenerator",children:(0,r.jsx)(n.code,{children:"nameGenerator"})})," prop. This enables proper form data submission to backend frameworks that expect specific naming conventions like bracket notation (",(0,r.jsx)(n.code,{children:"root[tasks][0][title]"}),") for PHP/Rails or dot notation (",(0,r.jsx)(n.code,{children:"root.tasks.0.title"}),") for other frameworks."]}),"\n",(0,r.jsx)(n.p,{children:"The default behavior is unchanged if the prop is not provided."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);