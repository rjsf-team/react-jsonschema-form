"use strict";(self.webpackChunk_rjsf_docs=self.webpackChunk_rjsf_docs||[]).push([[2455],{1184:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var i=r(4041);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},5468:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"migration-guides/v6.x upgrade guide","title":"6.x Upgrade Guide","description":"New packages","source":"@site/docs/migration-guides/v6.x upgrade guide.md","sourceDirName":"migration-guides","slug":"/migration-guides/v6.x upgrade guide","permalink":"/react-jsonschema-form/docs/migration-guides/v6.x upgrade guide","draft":false,"unlisted":false,"editUrl":"https://github.com/rjsf-team/react-jsonschema-form/tree/main/packages/docs/docs/migration-guides/v6.x upgrade guide.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"5.x Upgrade Guide","permalink":"/react-jsonschema-form/docs/migration-guides/v5.x upgrade guide"},"next":{"title":"Usage and Customization","permalink":"/react-jsonschema-form/docs/usage/"}}');var t=r(1085),s=r(1184);const a={},d="6.x Upgrade Guide",o={},l=[{value:"New packages",id:"new-packages",level:2},{value:"Breaking changes",id:"breaking-changes",level:2},{value:"CJS build changes",id:"cjs-build-changes",level:3},{value:"Theme removals",id:"theme-removals",level:3},{value:"bootstrap-4",id:"bootstrap-4",level:4},{value:"fluent-ui",id:"fluent-ui",level:4},{value:"material-ui",id:"material-ui",level:4},{value:"validator-ajv6",id:"validator-ajv6",level:3},{value:"Theme version support changes",id:"theme-version-support-changes",level:3},{value:"@rjsf/antd",id:"rjsfantd",level:4},{value:"@rjsf/chakra-ui",id:"rjsfchakra-ui",level:4},{value:"@mui version 5 and 6",id:"mui-version-5-and-6",level:4},{value:"@rjsf/semantic-ui DEPRECATED",id:"rjsfsemantic-ui-deprecated",level:4},{value:"Node support",id:"node-support",level:3},{value:"React version",id:"react-version",level:3},{value:"formContext BREAKING CHANGES",id:"formcontext-breaking-changes",level:3},{value:"Fields BREAKING CHANGES",id:"fields-breaking-changes",level:3},{value:"FieldProps.onChange",id:"fieldpropsonchange",level:3},{value:"FieldProps.idPrefix and FieldProps.idSeparator refactor",id:"fieldpropsidprefix-and-fieldpropsidseparator-refactor",level:3},{value:"Registry BREAKING CHANGES",id:"registry-breaking-changes",level:3},{value:"Templates BREAKING CHANGES",id:"templates-breaking-changes",level:3},{value:"ArrayFieldTemplateItemType",id:"arrayfieldtemplateitemtype",level:4},{value:"ArrayFieldItemTemplate",id:"arrayfielditemtemplate",level:4},{value:"GridTemplate",id:"gridtemplate",level:4},{value:"MultiSchemaFieldTemplate",id:"multischemafieldtemplate",level:4},{value:"SchemaUtilsType",id:"schemautilstype",level:4},{value:"Removed deprecations",id:"removed-deprecations",level:3},{value:"FormProps.acceptcharset",id:"formpropsacceptcharset",level:4},{value:"getMatchingOption()",id:"getmatchingoption",level:4},{value:"SchemaUtilsType.getMatchingOption()",id:"schemautilstypegetmatchingoption",level:4},{value:"mergeValidationData()",id:"mergevalidationdata",level:4},{value:"SchemaUtilsType.mergeValidationData()",id:"schemautilstypemergevalidationdata",level:4},{value:"ValidatorType.toErrorList()",id:"validatortypetoerrorlist",level:4},{value:"RJSF_ADDITONAL_PROPERTIES_FLAG",id:"rjsf_additonal_properties_flag",level:4},{value:"UiSchema.classNames",id:"uischemaclassnames",level:4},{value:"schema.enumNames",id:"schemaenumnames",level:4},{value:"Other BREAKING CHANGES",id:"other-breaking-changes",level:3},{value:"Primitive field handling in oneOf/anyOf schemas",id:"primitive-field-handling-in-oneofanyof-schemas",level:4},{value:"SchemaField removed Bootstrap 3 classes",id:"schemafield-removed-bootstrap-3-classes",level:4},{value:"prefixed RJSF template and field marker classes",id:"prefixed-rjsf-template-and-field-marker-classes",level:4},{value:"optionsList",id:"optionslist",level:4},{value:"New Features",id:"new-features",level:2},{value:"New types",id:"new-types",level:3},{value:"New non-validator utility functions",id:"new-non-validator-utility-functions",level:3},{value:"New validator-based utility functions",id:"new-validator-based-utility-functions",level:3},{value:"Dynamic UI Schema for Array Items",id:"dynamic-ui-schema-for-array-items",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"6x-upgrade-guide",children:"6.x Upgrade Guide"})}),"\n",(0,t.jsx)(n.h2,{id:"new-packages",children:"New packages"}),"\n",(0,t.jsx)(n.p,{children:"There are 5 new packages added in RJSF version 6:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@rjsf/daisyui"}),": This is new theme based on the ",(0,t.jsx)(n.code,{children:"daisyui"})," toolkit"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@rjsf/mantine"}),": This is new theme based on the ",(0,t.jsx)(n.code,{children:"mantine"})," toolkit"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@rjsf/primereact"}),": This is a new theme based on the ",(0,t.jsx)(n.code,{children:"PrimeReact"})," toolkit"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@rjsf/react-bootstrap"}),": This is rename of the ",(0,t.jsx)(n.code,{children:"bootstrap-4"})," theme with an upgrade to the latest version of ",(0,t.jsx)(n.code,{children:"react-bootstrap"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@rjsf/shadcn"}),": This is new theme based on the ",(0,t.jsx)(n.code,{children:"shadcn"})," toolkit"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,t.jsx)(n.h3,{id:"cjs-build-changes",children:"CJS build changes"}),"\n",(0,t.jsxs)(n.p,{children:["Due to making all of the ",(0,t.jsx)(n.code,{children:"package.json"})," files for the ",(0,t.jsx)(n.code,{children:"@rjsf/*"})," libraries include ",(0,t.jsx)(n.code,{children:'"type": "module"'})," to better support modern ",(0,t.jsx)(n.code,{children:"ESM"})," builds, the generation of the Common JS distributions were updated to produce ",(0,t.jsx)(n.code,{children:".cjs"})," files rather than ",(0,t.jsx)(n.code,{children:".js"})," files.\nHopefully this will not cause any issues with existing uses of the libraries. If so, one may need to switch from doing an ",(0,t.jsx)(n.code,{children:"import"})," of the CJS build to doing a ",(0,t.jsx)(n.code,{children:"require()"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"theme-removals",children:"Theme removals"}),"\n",(0,t.jsx)(n.p,{children:"The following themes were removed due to duplication of a framework with a newer theme"}),"\n",(0,t.jsx)(n.h4,{id:"bootstrap-4",children:"bootstrap-4"}),"\n",(0,t.jsxs)(n.p,{children:["The older ",(0,t.jsx)(n.code,{children:"bootstrap-4"})," theme has been removed in favor of the ",(0,t.jsx)(n.code,{children:"react-bootstrap"})," theme"]}),"\n",(0,t.jsx)(n.h4,{id:"fluent-ui",children:"fluent-ui"}),"\n",(0,t.jsxs)(n.p,{children:["The older ",(0,t.jsx)(n.code,{children:"fluent-ui"})," theme has been removed in favor of the ",(0,t.jsx)(n.code,{children:"fluentui-rc"})," theme"]}),"\n",(0,t.jsx)(n.h4,{id:"material-ui",children:"material-ui"}),"\n",(0,t.jsxs)(n.p,{children:["The older ",(0,t.jsx)(n.code,{children:"material-ui"})," theme has been removed in favor of the ",(0,t.jsx)(n.code,{children:"mui"})," theme"]}),"\n",(0,t.jsx)(n.h3,{id:"validator-ajv6",children:"validator-ajv6"}),"\n",(0,t.jsxs)(n.p,{children:["This deprecated validator has been removed. Use the ",(0,t.jsx)(n.code,{children:"validator-ajv8"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"theme-version-support-changes",children:"Theme version support changes"}),"\n",(0,t.jsx)(n.h4,{id:"rjsfantd",children:"@rjsf/antd"}),"\n",(0,t.jsxs)(n.p,{children:["Version 6 is dropping official support for ",(0,t.jsx)(n.code,{children:"antd"})," version 4. You must upgrade to version 5."]}),"\n",(0,t.jsx)(n.h4,{id:"rjsfchakra-ui",children:"@rjsf/chakra-ui"}),"\n",(0,t.jsxs)(n.p,{children:["Version 6 is dropping official support for ",(0,t.jsx)(n.code,{children:"@chakra-ui"})," version 2. You must upgrade to version 3. We are also requiring\n",(0,t.jsx)(n.code,{children:"chakra-react-select"})," version >=6 as a result."]}),"\n",(0,t.jsx)(n.h4,{id:"mui-version-5-and-6",children:"@mui version 5 and 6"}),"\n",(0,t.jsxs)(n.p,{children:["Version 6 is dropping official support for ",(0,t.jsx)(n.code,{children:"@mui/material"})," and ",(0,t.jsx)(n.code,{children:"@mui/icons-material"})," versions 5 and 6 due to the adoption\nof breaking changes in version 7. You must upgrade to version 7."]}),"\n",(0,t.jsx)(n.h4,{id:"rjsfsemantic-ui-deprecated",children:"@rjsf/semantic-ui DEPRECATED"}),"\n",(0,t.jsxs)(n.p,{children:["Version 6 is dropping official support for ",(0,t.jsx)(n.code,{children:"semantic-ui-react"})," version 1. You must upgrade to version 2. Also, this theme\nis deprecated and will be removed in a future release unless ",(0,t.jsx)(n.code,{children:"sematic-ui-react"})," version 3 is released with React 19\nsupport. Although that seems unlikely as no changes have been made to version 3 since December 2023."]}),"\n",(0,t.jsx)(n.h3,{id:"node-support",children:"Node support"}),"\n",(0,t.jsxs)(n.p,{children:["Version 6 is dropping official support for Node 14, 16, and 18 as they are no longer ",(0,t.jsx)(n.a,{href:"https://nodejs.org/en/about/releases/",children:"maintained versions"}),".\nPlease use Node 22 when making any changes to ",(0,t.jsx)(n.code,{children:"package.json"})," and ",(0,t.jsx)(n.code,{children:"package-lock.json"})," files.\nAll PR and branch builds are running against Node 20 and 22."]}),"\n",(0,t.jsx)(n.h3,{id:"react-version",children:"React version"}),"\n",(0,t.jsx)(n.p,{children:"RJSF is no longer actively supporting React version < 18.x.\nReact 18 is officially supported on all the themes."}),"\n",(0,t.jsx)(n.p,{children:"React 19 support is expected before the end of beta (although several developers have already upgraded with no problems)."}),"\n",(0,t.jsx)(n.h3,{id:"formcontext-breaking-changes",children:"formContext BREAKING CHANGES"}),"\n",(0,t.jsxs)(n.p,{children:["Removed the unnecessary ",(0,t.jsx)(n.code,{children:"formContext"})," property from the following interfaces since it is readily available in the ",(0,t.jsx)(n.code,{children:"registry"}),".\nIf you were using the ",(0,t.jsx)(n.code,{children:"formContext"})," in your custom ",(0,t.jsx)(n.code,{children:"template"}),", ",(0,t.jsx)(n.code,{children:"field"})," or ",(0,t.jsx)(n.code,{children:"widget"}),", simply get it from the ",(0,t.jsx)(n.code,{children:"registry"})," instead."]}),"\n",(0,t.jsxs)(n.p,{children:["Interfaces with ",(0,t.jsx)(n.code,{children:"formContext"})," removed:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ErrorListProps"})," - The properties that are passed to an ",(0,t.jsx)(n.code,{children:"ErrorListTemplate"})," implementation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FieldProps"})," - The properties that are passed to a ",(0,t.jsx)(n.code,{children:"Field"})," implementation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FieldTemplateProps"})," - The properties that are passed to a ",(0,t.jsx)(n.code,{children:"FieldTemplate"})," implementation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ArrayFieldTemplateProps"})," - The properties that are passed to an ",(0,t.jsx)(n.code,{children:"ArrayFieldTemplate"})," implementation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"WidgetProps"})," - The properties that are passed to a ",(0,t.jsx)(n.code,{children:"Widget"})," implementation"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"fields-breaking-changes",children:"Fields BREAKING CHANGES"}),"\n",(0,t.jsx)(n.h3,{id:"fieldpropsonchange",children:"FieldProps.onChange"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"onChange"})," handling for fields has been changed to fix a serious bug related to nearly simultaneous updates losing data.\nPreviously in 5.x, data change handling worked by passing a complete ",(0,t.jsx)(n.code,{children:"newFormData"})," object up to the ",(0,t.jsx)(n.code,{children:"Form"})," from the underlying ",(0,t.jsx)(n.code,{children:"Field"}),"s.\nIn 6.x, data change handling now works by passing just the changed ",(0,t.jsx)(n.code,{children:"newValue"})," for a ",(0,t.jsx)(n.code,{children:"Field"})," and the ",(0,t.jsx)(n.code,{children:"path"})," array of the ",(0,t.jsx)(n.code,{children:"Field"})," within the ",(0,t.jsx)(n.code,{children:"formData"}),", with the ",(0,t.jsx)(n.code,{children:"Form"})," itself being responsible for injecting the changed data into the ",(0,t.jsx)(n.code,{children:"formData"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["As a result, the ",(0,t.jsx)(n.code,{children:"FieldProps"})," interface was updated with the following breaking change so that custom ",(0,t.jsx)(n.code,{children:"Field"})," authors are forced to respond to this update:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Version 5's `onChange` handler:\n\n/** The field change event handler; called with the updated form data and an optional `ErrorSchema` */\nonChange: (newFormData: T | undefined, es?: ErrorSchema<T>, id?: string) => any;\n\n// Version 6's `onChange` handler:\n/** The field change event handler; called with the updated field value, the optional change path for the value\n * (defaults to an empty array), an optional ErrorSchema and the optional id of the field being changed\n */\nonChange: (newValue: T | undefined, path?: (number | string)[], es?: ErrorSchema<T>, id?: string) => void;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In order to support letting the ",(0,t.jsx)(n.code,{children:"Form"})," know what the path of the change was, a new ",(0,t.jsx)(n.code,{children:"path: (number | string)[]"})," parameter was injected into the handler before the ",(0,t.jsx)(n.code,{children:"es?: ErrorSchema<T>"})," parameter.\nIf you have written a custom ",(0,t.jsx)(n.code,{children:"Field"})," that implements merging the new value into the ",(0,t.jsx)(n.code,{children:"newFormData"}),", now you just need to pass that value and provide an empty ",(0,t.jsx)(n.code,{children:"path"})," array to the ",(0,t.jsx)(n.code,{children:"onChange"})," function."]}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example of a custom ",(0,t.jsx)(n.code,{children:"Field"})," that was updated due to this change:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { FieldProps } from '@rjsf/utils';\nimport { getDefaultRegistry } from '@rjsf/core';\n\nconst { ArrayField } = getDefaultRegistry().fields;\n\n// Version 5-based custom field\nfunction CustomField(props: FieldProps) {\n  const {\n    idSchema: { $id },\n    formData,\n    onChange,\n  } = props;\n  const changeHandlerFactory = (fieldName: string) => (event: any) => {\n    onChange({ ...formData, [fieldName]: event.target.value });\n  };\n  return (\n    <>\n      <h4>Location</h4>\n      <div>\n        <label htmlFor={`${$id}-city`}>City</label>\n        <input\n          className='form-control'\n          id={`${$id}-city`}\n          required={false}\n          placeholder=''\n          type='text'\n          value={formData?.city || ''}\n          onChange={changeHandlerFactory('city')}\n        />\n      </div>\n      <div>\n        <label htmlFor={`${$id}-lat`}>Latitude</label>\n        <input\n          className='form-control'\n          id={`${$id}-lat`}\n          type='number'\n          value={formData?.lat || 0}\n          onChange={changeHandlerFactory('lat')}\n        />\n      </div>\n      <div>\n        <label htmlFor={`${$id}-lon`}>Longitude</label>\n        <input\n          className='form-control'\n          id={`${$id}-lon`}\n          type='number'\n          value={formData?.lon || 0}\n          onChange={changeHandlerFactory('lon')}\n        />\n      </div>\n    </>\n  );\n}\n\n// Version 6-based custom field\nfunction CustomField(props: FieldProps) {\n  const {\n    idSchema: { $id },\n    formData,\n    onChange,\n  } = props;\n  const changeHandlerFactory = (fieldName: string) => (event: any) => {\n    onChange(event.target.value, [fieldName]);\n  };\n  return (\n    <>\n      <h4>Location</h4>\n      <div>\n        <label htmlFor={`${$id}-city`}>City</label>\n        <input\n          className='form-control'\n          id={`${$id}-city`}\n          required={false}\n          placeholder=''\n          type='text'\n          value={formData?.city || ''}\n          onChange={changeHandlerFactory('city')}\n        />\n      </div>\n      <div>\n        <label htmlFor={`${$id}-lat`}>Latitude</label>\n        <input\n          className='form-control'\n          id={`${$id}-lat`}\n          type='number'\n          value={formData?.lat || 0}\n          onChange={changeHandlerFactory('lat')}\n        />\n      </div>\n      <div>\n        <label htmlFor={`${$id}-lon`}>Longitude</label>\n        <input\n          className='form-control'\n          id={`${$id}-lon`}\n          type='number'\n          value={formData?.lon || 0}\n          onChange={changeHandlerFactory('lon')}\n        />\n      </div>\n    </>\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The same change also applies to the ",(0,t.jsx)(n.code,{children:"ErrorSchema"})," object being passed to the ",(0,t.jsx)(n.code,{children:"Form"}),".\nTherefore, if your custom ",(0,t.jsx)(n.code,{children:"Field"})," also updated the ",(0,t.jsx)(n.code,{children:"ErrorSchema"})," to add a new error, now you just need to pass that error as well."]}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example of a custom ",(0,t.jsx)(n.code,{children:"Field"})," that was updated due to this change:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { FieldProps } from '@rjsf/utils';\nimport { getDefaultRegistry } from '@rjsf/core';\n\nconst { StringField } = getDefaultRegistry().fields;\n\n// Version 5-based custom field\nfunction StringFieldError(props: FieldProps) {\n  const onChange = (newFormData: any | undefined, es?: ErrorSchema, id?: string) => {\n    let raiseError = es;\n    if (newFormData === 'test') {\n      raiseError = {\n        ...es,\n        __errors: ['Value cannot be \"test\"'],\n      };\n    }\n    props.onChange(newFormData, raiseError, id);\n  };\n  return <StringField {...props} onChange={onChange} />;\n}\n\n// Version 6-based custom field\nfunction StringFieldError(props: FieldProps) {\n  const onChange = (newValue: any | undefined, path?: (number | string)[], es?: ErrorSchema, id?: string) => {\n    let raiseError = es;\n    if (newValue === 'test') {\n      raiseError = {\n        __errors: ['Value cannot be \"test\"'],\n      };\n    }\n    props.onChange(newValue, path, raiseError, id);\n  };\n  return <StringField {...props} onChange={onChange} />;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"fieldpropsidprefix-and-fieldpropsidseparator-refactor",children:"FieldProps.idPrefix and FieldProps.idSeparator refactor"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"idPrefix"})," and ",(0,t.jsx)(n.code,{children:"idSeparator"})," props were refactored from the ",(0,t.jsx)(n.code,{children:"FieldProps"})," interface to the new ",(0,t.jsx)(n.code,{children:"GlobalFormOptions"})," interface,\nIf your custom implementation required either of those props, you can simply obtain them from the ",(0,t.jsx)(n.code,{children:"registry.globalFormOptions"})," variable instead."]}),"\n",(0,t.jsx)(n.h3,{id:"registry-breaking-changes",children:"Registry BREAKING CHANGES"}),"\n",(0,t.jsxs)(n.p,{children:["A new required prop, ",(0,t.jsx)(n.code,{children:"globalFormOptions: GlobalFormOptions"}),", was added to the ",(0,t.jsx)(n.code,{children:"Registry"})," interface.\nThis could affect your tests if you have your own way of creating ",(0,t.jsx)(n.code,{children:"registry"})," objects to test your custom widgets, fields and/or templates.\nIf you are creating ",(0,t.jsx)(n.code,{children:"Registry"})," objects, you simply need to add an empty object to the ",(0,t.jsx)(n.code,{children:"globalFormOptions"})," prop.\nYou may also, provide values for any of the optional props contained within the ",(0,t.jsx)(n.code,{children:"GlobalFormOptions"})," type."]}),"\n",(0,t.jsxs)(n.p,{children:["The definition of the ",(0,t.jsx)(n.code,{children:"GlobalFormOptions"})," object is:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"/** The set of options from the `Form` that will be available on the `Registry` for use in everywhere the `registry` is\n * available.\n */\nexport type GlobalFormOptions = {\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`. This prop is passed to the `toIdSchema()` function within the RJSF field implementations.\n   */\n  readonly idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids; Default is `_`. This prop is passed to the `toIdSchema()` function within the RJSF field implementations.\n   */\n  readonly idSeparator?: string;\n  /** The component update strategy used by the Form and its fields for performance optimization */\n  readonly experimental_componentUpdateStrategy?: 'customDeep' | 'shallow' | 'always';\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"templates-breaking-changes",children:"Templates BREAKING CHANGES"}),"\n",(0,t.jsx)(n.h4,{id:"arrayfieldtemplateitemtype",children:"ArrayFieldTemplateItemType"}),"\n",(0,t.jsxs)(n.p,{children:["The type ",(0,t.jsx)(n.code,{children:"ArrayFieldTemplateItemType"})," was deprecated in favor of the ",(0,t.jsx)(n.code,{children:"ArrayFieldItemTemplateType"})," type, which matches the type naming pattern properly."]}),"\n",(0,t.jsx)(n.h4,{id:"arrayfielditemtemplate",children:"ArrayFieldItemTemplate"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ArrayFieldItemTemplateType"})," was refactored to extract the following props into out a new ",(0,t.jsx)(n.code,{children:"ArrayFieldItemButtonsTemplateType"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"canAdd"}),": A boolean value stating whether new items can be added to the array."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hasCopy"}),": A boolean value stating whether the array item can be copied."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hasMoveDown"}),": A boolean value stating whether the array item can be moved down."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hasMoveUp"}),": A boolean value stating whether the array item can be moved up."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hasRemove"}),": A boolean value stating whether the array item can be removed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onAddIndexClick: (index) => (event?) => void"}),": Returns a function that adds a new item at ",(0,t.jsx)(n.code,{children:"index"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onDropIndexClick: (index) => (event?) => void"}),": Returns a function that removes the item at ",(0,t.jsx)(n.code,{children:"index"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"onReorderClick: (index, newIndex) => (event?) => void"}),": Returns a function that swaps the items at ",(0,t.jsx)(n.code,{children:"index"})," with ",(0,t.jsx)(n.code,{children:"newIndex"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["A new ",(0,t.jsx)(n.code,{children:"buttonsProps"})," prop was added of the type ",(0,t.jsx)(n.code,{children:"ArrayFieldItemButtonsTemplateType"})]}),"\n",(0,t.jsxs)(n.p,{children:["This new type was then used to create a new ",(0,t.jsx)(n.code,{children:"ArrayFieldItemButtonsTemplate"})," in the ",(0,t.jsx)(n.code,{children:"Registry.templates"}),".\nSee ",(0,t.jsx)(n.a,{href:"/react-jsonschema-form/docs/advanced-customization/custom-templates#arrayfielditembuttontemplate",children:"ArrayFieldItemButtonTemplate"})]}),"\n",(0,t.jsxs)(n.p,{children:["If you have implemented your own ",(0,t.jsx)(n.code,{children:"ArrayFieldItemTemplate"})," or ",(0,t.jsx)(n.code,{children:"ArrayField"})," then you will have to account for these changes."]}),"\n",(0,t.jsx)(n.h4,{id:"gridtemplate",children:"GridTemplate"}),"\n",(0,t.jsxs)(n.p,{children:["A new, theme-dependent template ",(0,t.jsx)(n.code,{children:"GridTemplate"})," was added to support the new layout feature and must be provided if you are building your own ",(0,t.jsx)(n.code,{children:"registry.templates"})," rather than overloading them via the ",(0,t.jsx)(n.code,{children:"templates"})," props."]}),"\n",(0,t.jsx)(n.h4,{id:"multischemafieldtemplate",children:"MultiSchemaFieldTemplate"}),"\n",(0,t.jsxs)(n.p,{children:["This new template was created to extract styling applied to the ",(0,t.jsx)(n.code,{children:"MultiSchemaField"})," component in the ",(0,t.jsx)(n.code,{children:"@rjsf/core"})," package."]}),"\n",(0,t.jsxs)(n.p,{children:["If you have styled your form using the following classNames and you do NOT use the ",(0,t.jsx)(n.code,{children:"@rjsf/core"})," theme, you may need to adjust your styles, as they may have been removed from your theme: ",(0,t.jsx)(n.code,{children:"panel"}),", ",(0,t.jsx)(n.code,{children:"panel-default"}),", ",(0,t.jsx)(n.code,{children:"panel-body"}),", ",(0,t.jsx)(n.code,{children:"form-group"}),"."]}),"\n",(0,t.jsx)(n.h4,{id:"schemautilstype",children:"SchemaUtilsType"}),"\n",(0,t.jsx)(n.p,{children:"Five new functions were added to this type, so if you have your own implementation of this type, you will need to add them to yours.\nThe following new functions match the 5 new validator-based utility API functions mentioned below:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"findFieldInSchema(path: string | string[], schema: S, formData?: T): FoundFieldType<S>"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"findSelectedOptionInXxxOf(schema: S, fallbackField: string, xxx: 'anyOf' | "}),"oneOf",(0,t.jsx)(n.code,{children:", formData?: T): S | undefined;"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"getFromSchema(schema: S, path: string | string[], defaultValue: T): T;"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"getFromSchema(schema: S, path: string | string[], defaultValue: S): S;"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"getFromSchema(schema: S, path: string | string[], defaultValue: T | S): S | T;"})}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"removed-deprecations",children:"Removed deprecations"}),"\n",(0,t.jsx)(n.p,{children:"The following deprecations were removed from the code base in v6"}),"\n",(0,t.jsx)(n.h4,{id:"formpropsacceptcharset",children:"FormProps.acceptcharset"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"acceptcharset"})," prop on ",(0,t.jsx)(n.code,{children:"Form"})," was removed. Use the ",(0,t.jsx)(n.code,{children:"acceptCharset"})," prop instead. I.e.:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"<Form acceptCharset='ISO-8859-1' />\n"})}),"\n",(0,t.jsx)(n.h4,{id:"getmatchingoption",children:"getMatchingOption()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"getMatchingOption()"})," function in ",(0,t.jsx)(n.code,{children:"@rjsf/utils"})," was removed. Use the ",(0,t.jsx)(n.code,{children:"getFirstMatchingOption()"})," function instead.\nI.e.:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { getFirstMatchingOption, RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  // your schema goes here\n};\n\nconst formData = {\n  /* your form data goes here */\n};\nconst options: RJSFSchema[] = [\n  /* your options extracted from the schema go here */\n];\n\nconst option = getFirstMatchingOption(validator, formData, options, schema);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"schemautilstypegetmatchingoption",children:"SchemaUtilsType.getMatchingOption()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"getMatchingOption()"})," function in the ",(0,t.jsx)(n.code,{children:"SchemaUtilsType"})," was removed. Use the ",(0,t.jsx)(n.code,{children:"getFirstMatchingOption()"})," funciton on\nthe type instead. I.e.:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { createSchemaUtils, RJSFSchema } from '@rjsf/utils';\nimport validator from '@rjsf/validator-ajv8';\n\nconst schema: RJSFSchema = {\n  // your schema goes here\n};\n\nconst formData = {\n  /* your form data goes here */\n};\nconst options: RJSFSchema[] = [\n  /* your options extracted from the schema go here */\n];\nconst schemaUtils = createSchemaUtils(validator, schema);\n\nconst option = schemaUtils.getFirstMatchingOption(formData, options);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"mergevalidationdata",children:"mergeValidationData()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"mergeValidationData()"})," function from ",(0,t.jsx)(n.code,{children:"@rjsf/utils"})," was removed. Use the ",(0,t.jsx)(n.code,{children:"validationDataMerge()"})," function instead.\nI.e.:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { validationDataMerge, ValidationData, ErrorSchema } from '@rjsf/utils';\n\nconst validationData: ValidationData = {\n  errors: [\n    /* Your validation errors go here */\n  ],\n  errorSchema: {\n    /* Your error schema goes here */\n  },\n};\n\nconst additionalErrorSchema: ErrorSchema = {\n  /* Your additional error schema goes here */\n};\n\nconst merged = validationDataMerge(validationData, additionalErrorSchema);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"schemautilstypemergevalidationdata",children:"SchemaUtilsType.mergeValidationData()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"mergeValidationData()"})," function in the ",(0,t.jsx)(n.code,{children:"SchemaUtilsType"})," was removed. Use the standalone ",(0,t.jsx)(n.code,{children:"validationDataMerge()"}),"\nfunction instead. I.e.:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { toErrorList } from '@rjsf/utils';\n\nconst validationData: ValidationData = {\n  errors: [\n    /* Your validation errors go here */\n  ],\n  errorSchema: {\n    /* Your error schema goes here */\n  },\n};\n\nconst additionalErrorSchema: ErrorSchema = {\n  /* Your additional error schema goes here */\n};\n\nconst merged = validationDataMerge(validationData, additionalErrorSchema);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"validatortypetoerrorlist",children:"ValidatorType.toErrorList()"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"toErrorList()"})," function on the ",(0,t.jsx)(n.code,{children:"ValidatorType"})," interface was removed. Use the standalone ",(0,t.jsx)(n.code,{children:"toErrorList()"})," function\nfrom ",(0,t.jsx)(n.code,{children:"@rjsf/utils"})," instead. I.e.:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { validationDataMerge, ErrorSchema, RJSFValidationError, toErrorList } from '@rjsf/utils';\n\nconst errorSchema: ErrorSchema = {\n  /* Your error schema goes here */\n};\n\nconst validationErrors: RJSFValidationError[] = toErrorList(errorSchema);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"rjsf_additonal_properties_flag",children:"RJSF_ADDITONAL_PROPERTIES_FLAG"}),"\n",(0,t.jsxs)(n.p,{children:["The constant ",(0,t.jsx)(n.code,{children:"RJSF_ADDITONAL_PROPERTIES_FLAG"})," was removed from ",(0,t.jsx)(n.code,{children:"@rjsf/utils"}),". Use the ",(0,t.jsx)(n.code,{children:"RJSF_ADDITIONAL_PROPERTIES_FLAG"}),"\nconstant instead. I.e.:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { RJSF_ADDITIONAL_PROPERTIES_FLAG } from '@rjsf/utils';\n"})}),"\n",(0,t.jsx)(n.h4,{id:"uischemaclassnames",children:"UiSchema.classNames"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"classNames"})," notation on ",(0,t.jsx)(n.code,{children:"UiSchema"})," was removed. Use the ",(0,t.jsx)(n.code,{children:"ui:classNames"})," notation instead. I.e.:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "someField": {\n    "ui:classNames": "someCustomClass"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"schemaenumnames",children:"schema.enumNames"}),"\n",(0,t.jsxs)(n.p,{children:["The custom ",(0,t.jsx)(n.code,{children:"enumNames"})," property support on a JSON Schema that RJSF invented has been removed. Please use the ",(0,t.jsx)(n.code,{children:"UiSchema"}),"\nreplacement, ",(0,t.jsx)(n.code,{children:"ui:enumNames"})," instead. I.e.:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { UiSchema, RJSFSchema } from '@rjsf/utils';\n\nconst schema: RJSFSchema = {\n  type: 'object',\n  properties: {\n    attendance: {\n      title: 'How did you attend the event?',\n      enum: ['person', 'phone', 'video'],\n    },\n    rating: {\n      title: 'How would you rate this event?',\n      enum: ['0', '1', '2', '3', '4'],\n    },\n  },\n};\n\nconst uiSchema: UiSchema = {\n  attendance: {\n    'ui:enumNames': ['I joined in person', 'I called in using the phone number', 'I joined using the video link'],\n  },\n  rating: {\n    'ui:enumNames': [\"I did't like it\", 'It was meh', 'It was ok', 'I liked it', 'I loved it'],\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"ui:enumNames"})," in the ",(0,t.jsx)(n.code,{children:"UiSchema"})," instead."]}),"\n",(0,t.jsx)(n.h3,{id:"other-breaking-changes",children:"Other BREAKING CHANGES"}),"\n",(0,t.jsx)(n.h4,{id:"primitive-field-handling-in-oneofanyof-schemas",children:"Primitive field handling in oneOf/anyOf schemas"}),"\n",(0,t.jsxs)(n.p,{children:["A bug fix was implemented that changes how primitive fields (boolean, string, number, etc.) are handled when switching between oneOf/anyOf schema options with ",(0,t.jsx)(n.code,{children:'mergeDefaultsIntoFormData: "useDefaultIfFormDataUndefined"'}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Previous (buggy) behavior"}),": Undefined primitive fields were incorrectly set to empty objects ",(0,t.jsx)(n.code,{children:"{}"})," when switching between schema variants."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"New (correct) behavior"}),": Undefined primitive fields now remain ",(0,t.jsx)(n.code,{children:"undefined"})," or receive proper default values according to their type when switching between schema variants."]}),"\n",(0,t.jsxs)(n.p,{children:["This change fixes ",(0,t.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/4709",children:"#4709"})," and was implemented in ",(0,t.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/pull/4710",children:"#4710"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Impact"}),": If your application was incorrectly relying on undefined primitive fields becoming ",(0,t.jsx)(n.code,{children:"{}"})," objects, you may need to update your form validation or data processing logic to handle proper primitive values or ",(0,t.jsx)(n.code,{children:"undefined"})," instead."]}),"\n",(0,t.jsx)(n.h4,{id:"schemafield-removed-bootstrap-3-classes",children:"SchemaField removed Bootstrap 3 classes"}),"\n",(0,t.jsxs)(n.p,{children:["In fixing ",(0,t.jsx)(n.a,{href:"https://github.com/rjsf-team/react-jsonschema-form/issues/2280",children:"#2280"}),", the following ",(0,t.jsx)(n.code,{children:"Bootstrap 3"})," classes\n(",(0,t.jsx)(n.code,{children:"form-group"}),", ",(0,t.jsx)(n.code,{children:"has-error"})," and ",(0,t.jsx)(n.code,{children:"has-danger"})," error classes) were removed from the ",(0,t.jsx)(n.code,{children:"classNames"})," prop passed down to the\n",(0,t.jsx)(n.code,{children:"FieldTemplate"}),". They were instead moved into the ",(0,t.jsx)(n.code,{children:"core"})," theme's ",(0,t.jsx)(n.code,{children:"WrapIfAdditionalTemplate"})," to ensure that theme was\nunchanged."]}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, the Bootstrap 3 classes ",(0,t.jsx)(n.code,{children:"panel"}),", ",(0,t.jsx)(n.code,{children:"panel-default"}),", ",(0,t.jsx)(n.code,{children:"panel-body"}),", and ",(0,t.jsx)(n.code,{children:"form-group"})," were removed from the\n",(0,t.jsx)(n.code,{children:"MultiSchemaField"})," component in the ",(0,t.jsx)(n.code,{children:"@rjsf/core"})," package, and moved into the ",(0,t.jsx)(n.code,{children:"core"})," theme's ",(0,t.jsx)(n.code,{children:"MultiSchemaFieldTemplate"}),"\nto ensure that the theme was unchanged."]}),"\n",(0,t.jsxs)(n.p,{children:["As a result, the themes (other than ",(0,t.jsx)(n.code,{children:"core"}),") will no longer render these classes."]}),"\n",(0,t.jsxs)(n.p,{children:["If you use a non-",(0,t.jsx)(n.code,{children:"core"})," theme and were relying on them for in your application's styling or behavior (via css overrides\nperhaps), then you can still use the non-",(0,t.jsx)(n.code,{children:"Bootstrap 3"})," RJSF marker class (see below) or your specific theme's error classes."]}),"\n",(0,t.jsx)(n.h4,{id:"prefixed-rjsf-template-and-field-marker-classes",children:"prefixed RJSF template and field marker classes"}),"\n",(0,t.jsxs)(n.p,{children:["Many of the ",(0,t.jsx)(n.code,{children:"core"})," RJSF templates and field implementations that are shared across all themes were updated to add the\n",(0,t.jsx)(n.code,{children:"rjsf-"})," prefix to the marker classes that are being added to the rendered HTML. The following table highlights the old\nand new marker classes. If you were relying on any of these classes, simply do a rename:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"old marker class"}),(0,t.jsx)(n.th,{children:"new marker class"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"field"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-field"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"field-<schema.type>"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-field-<schema.type>"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"field-array"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-field-array"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"field-array-of-<schema.type>"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-field-array-of-<schema.type>"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"field-array-fixed-items"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-field-array-fixed-items"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"field-error"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-field-error"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"field-hidden"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-field-hidden"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"array-item"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-array-item"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"config-error"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-config-error"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"array-item-add"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-array-item-add"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"array-item-copy"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-array-item-copy"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"array-item-move-down"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-array-item-move-down"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"array-item-move-up"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-array-item-move-up"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"array-item-remove"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-array-item-remove"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object-property-expand"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-object-property-expand"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"object-property-remove"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"rjsf-object-property-remove"})})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"optionslist",children:"optionsList"}),"\n",(0,t.jsxs)(n.p,{children:["The generics ordering on the ",(0,t.jsx)(n.code,{children:"optionsList()"})," function was changed from ",(0,t.jsx)(n.code,{children:"<S, T, F>"})," to ",(0,t.jsx)(n.code,{children:"<T, S, F>"})," to be consistent with the rest of the APIs."]}),"\n",(0,t.jsx)(n.h2,{id:"new-features",children:"New Features"}),"\n",(0,t.jsx)(n.h3,{id:"new-types",children:"New types"}),"\n",(0,t.jsxs)(n.p,{children:["The following new types were added to ",(0,t.jsx)(n.code,{children:"@rjsf/utils"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ArrayFieldItemTemplateType"}),": The properties of each element in the ArrayFieldTemplateProps.items array. NOTE: ",(0,t.jsx)(n.code,{children:"ArrayFieldTemplateItemType"})," is an alias to this type"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FoundFieldType"}),": The interface for the return value of the ",(0,t.jsx)(n.code,{children:"findFieldInSchema"})," function"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GridTemplateProps"}),": The properties that are passed to a ",(0,t.jsx)(n.code,{children:"GridTemplate"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"MultiSchemaFieldTemplateProps"}),": The properties that are passed to a ",(0,t.jsx)(n.code,{children:"MultiSchemaFieldTemplate"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TestIdShape"}),": The interface for the test ID proxy objects that are returned by the ",(0,t.jsx)(n.code,{children:"getTestId"})," utility function"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"new-non-validator-utility-functions",children:"New non-validator utility functions"}),"\n",(0,t.jsxs)(n.p,{children:["Three new and three formerly internally private utility functions are available in ",(0,t.jsx)(n.code,{children:"@rjsf/utils"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"buttonId<T>(id: IdSchema<T> | string, btn: 'add' | 'copy' | 'moveDown' | 'moveUp' | 'remove')"}),": Generates consistent ids for RJSF buttons"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"getTestIds(): TestIdShape"}),": Returns an object of test IDs that can only be used in test mode, helpful for writing unit tests for React components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hashObject(object: unknown): string"}),": Stringifies an ",(0,t.jsx)(n.code,{children:"object"})," and returns the hash of the resulting string"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hashString(string: string): string"}),": Hashes a string into hex format"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"lookupFromFormContext<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(regOrFc: Registry<T, S, F> | Registry<T, S, F>['formContext'], toLookup: string, fallback?: unknown)"}),": Given a React JSON Schema Form registry or formContext object, return the value associated with ",(0,t.jsx)(n.code,{children:"toLookup"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sortedJSONStringify(object: unknown): string"}),": Stringifies an ",(0,t.jsx)(n.code,{children:"object"}),", sorts object fields in consistent order before stringifying it."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"new-validator-based-utility-functions",children:"New validator-based utility functions"}),"\n",(0,t.jsxs)(n.p,{children:["Three new validator-based utility functions are available in ",(0,t.jsx)(n.code,{children:"@rjsf/utils"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"findFieldInSchema<T = undefined, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(validator: ValidatorType<T, S, F>, rootSchema: S, path: string | string[], schema: S, formData?: T, experimental_customMergeAllOf?: Experimental_CustomMergeAllOf<S>): FoundFieldType<S>"}),": Finds the field specified by the ",(0,t.jsx)(n.code,{children:"path"})," within the root or recursed ",(0,t.jsx)(n.code,{children:"schema"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"findSelectedOptionInXxxOf<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(validator: ValidatorType<T, S, F>, rootSchema: S, schema: S, fallbackField: string,xxx: 'anyOf' | 'oneOf', formData?: T, experimental_customMergeAllOf?: Experimental_CustomMergeAllOf<S>): S | undefined"}),": Finds the option that matches the selector field in the ",(0,t.jsx)(n.code,{children:"schema"})," or undefined if nothing is selected"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"getFromSchema<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(validator: ValidatorType<T, S, F>, rootSchema: S, schema: S, path: string | string[], defaultValue: T | S, experimental_customMergeAllOf?: Experimental_CustomMergeAllOf<S>): T | S"}),": Helper that acts like lodash's ",(0,t.jsx)(n.code,{children:"get"})," but additionally retrieves ",(0,t.jsx)(n.code,{children:"$ref"}),"s as needed to get the path for schemas"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"dynamic-ui-schema-for-array-items",children:"Dynamic UI Schema for Array Items"}),"\n",(0,t.jsxs)(n.p,{children:["RJSF 6.x introduces a new feature that allows dynamic UI schema generation for array items.\nThe ",(0,t.jsx)(n.code,{children:"items"})," property in a ",(0,t.jsx)(n.code,{children:"uiSchema"})," can now accept a function that returns a UI schema based on the array item's data, index, and form context."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const uiSchema: UiSchema = {\n  myArrayField: {\n    items: (itemData, index, formContext) => {\n      // Return different UI schemas based on item data\n      if (itemData?.type === 'special') {\n        return { 'ui:widget': 'textarea' };\n      }\n      return { 'ui:widget': 'text' };\n    },\n  },\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This feature is fully backward compatible - existing forms using object-based ",(0,t.jsx)(n.code,{children:"uiSchema.items"})," will continue to work without changes.\nSee the ",(0,t.jsx)(n.a,{href:"/react-jsonschema-form/docs/api-reference/dynamic-ui-schema-examples",children:"Dynamic UI Schema Examples"})," documentation for comprehensive examples and usage patterns."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);