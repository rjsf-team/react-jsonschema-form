// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schemaParser() parse schema with allof not able to merge 1`] = `
{
  "-44c06f09": {
    "$id": "-44c06f09",
    "allOf": [
      {
        "if": {
          "properties": {
            "animal": {
              "const": "Cat",
            },
          },
        },
        "then": {
          "properties": {
            "food": {
              "enum": [
                "meat",
                "grass",
                "fish",
              ],
              "type": "string",
            },
          },
          "required": [
            "food",
          ],
        },
      },
      {
        "if": {
          "properties": {
            "animal": {
              "const": "Fish",
            },
          },
        },
        "then": {
          "properties": {
            "food": {
              "enum": [
                "insect",
                "worms",
              ],
              "type": "string",
            },
            "water": {
              "enum": [
                "lake",
                "sea",
              ],
              "type": "string",
            },
          },
          "required": [
            "food",
            "water",
          ],
        },
      },
      {
        "required": [
          "animal",
        ],
      },
    ],
    "properties": {
      "animal": {
        "enum": [
          "Cat",
          "Fish",
        ],
      },
    },
    "type": "object",
  },
  "59fefb6e": {
    "$id": "59fefb6e",
    "properties": {
      "animal": {
        "const": "Fish",
      },
    },
  },
  "6f438756": {
    "$id": "6f438756",
    "properties": {
      "animal": {
        "const": "Cat",
      },
    },
  },
}
`;

exports[`schemaParser() parse schema with array condition 1`] = `
{
  "-33d8d73c": {
    "$id": "-33d8d73c",
    "properties": {
      "country": {
        "const": "United States of America",
      },
    },
  },
  "f254d0a": {
    "$id": "f254d0a",
    "properties": {
      "list": {
        "items": {
          "else": {
            "properties": {
              "postal_code": {
                "pattern": "[A-Z][0-9][A-Z] [0-9][A-Z][0-9]",
              },
            },
          },
          "if": {
            "properties": {
              "country": {
                "const": "United States of America",
              },
            },
          },
          "properties": {
            "country": {
              "default": "United States of America",
              "enum": [
                "United States of America",
                "Canada",
              ],
            },
          },
          "then": {
            "properties": {
              "postal_code": {
                "pattern": "[0-9]{5}(-[0-9]{4})?",
              },
            },
          },
          "type": "object",
        },
        "type": "array",
      },
    },
    "type": "object",
  },
}
`;

exports[`schemaParser() parses property dependencies properly 1`] = `
{
  "-4e612676": {
    "$id": "-4e612676",
    "dependencies": {
      "a": [
        "b",
      ],
    },
    "properties": {
      "a": {
        "type": "string",
      },
      "b": {
        "type": "integer",
      },
    },
    "required": [
      "a",
    ],
    "type": "object",
  },
}
`;

exports[`schemaParser() parses recursive refs in allOf properly 1`] = `
{
  "2b3d97f8": {
    "$id": "2b3d97f8",
    "definitions": {
      "@enum": {
        "properties": {
          "_id": {
            "title": "Value",
            "type": "number",
          },
          "children": {
            "items": {
              "allOf": [
                {
                  "$ref": "#/definitions/@enum",
                },
              ],
            },
            "title": "Subvalues",
            "type": "array",
          },
          "name": {
            "default": "",
            "title": "Name",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
    "properties": {
      "value": {
        "items": {
          "allOf": [
            {
              "$ref": "#/definitions/@enum",
            },
          ],
        },
        "minItems": 1,
        "type": "array",
      },
    },
    "type": "object",
  },
}
`;

exports[`schemaParser() parses recursive refs properly 1`] = `
{
  "7cf4cd8a": {
    "$id": "7cf4cd8a",
    "$ref": "#/definitions/@enum",
    "definitions": {
      "@enum": {
        "properties": {
          "children": {
            "$ref": "#/definitions/@enum",
          },
          "name": {
            "default": "",
            "title": "Name",
            "type": "string",
          },
        },
        "type": "object",
      },
    },
  },
}
`;

exports[`schemaParser() parses schema and required dependencies properly 1`] = `
{
  "-738b34fc": {
    "$id": "-738b34fc",
    "dependencies": {
      "a": {
        "properties": {
          "a": {
            "type": "string",
          },
        },
        "required": [
          "b",
        ],
      },
    },
    "properties": {
      "a": {
        "type": "string",
      },
      "b": {
        "type": "integer",
      },
    },
    "required": [
      "a",
    ],
    "type": "object",
  },
}
`;

exports[`schemaParser() parses schema dependencies properly 1`] = `
{
  "75f1f611": {
    "$id": "75f1f611",
    "dependencies": {
      "a": {
        "properties": {
          "b": {
            "type": "integer",
          },
        },
      },
    },
    "properties": {
      "a": {
        "type": "string",
      },
    },
    "type": "object",
  },
}
`;

exports[`schemaParser() parses schema dependencies with one of and refs properly 1`] = `
{
  "-29b1244f": {
    "$id": "-29b1244f",
    "properties": {
      "a": {
        "enum": [
          "int",
        ],
      },
    },
    "type": "object",
  },
  "71dd1668": {
    "$id": "71dd1668",
    "properties": {
      "a": {
        "enum": [
          "bool",
        ],
      },
    },
    "type": "object",
  },
  "7de97d9a": {
    "$id": "7de97d9a",
    "definitions": {
      "needsA": {
        "properties": {
          "a": {
            "enum": [
              "int",
            ],
          },
          "b": {
            "type": "integer",
          },
        },
      },
      "needsB": {
        "properties": {
          "a": {
            "enum": [
              "bool",
            ],
          },
          "b": {
            "type": "boolean",
          },
        },
      },
    },
    "dependencies": {
      "a": {
        "oneOf": [
          {
            "$ref": "#/definitions/needsA",
          },
          {
            "$ref": "#/definitions/needsB",
          },
        ],
      },
    },
    "properties": {
      "a": {
        "enum": [
          "int",
          "bool",
        ],
        "type": "string",
      },
    },
    "type": "object",
  },
}
`;

exports[`schemaParser() parses schema with a single condition 1`] = `
{
  "-33d8d73c": {
    "$id": "-33d8d73c",
    "properties": {
      "country": {
        "const": "United States of America",
      },
    },
  },
  "7a88ed97": {
    "$id": "7a88ed97",
    "else": {
      "properties": {
        "postal_code": {
          "pattern": "[A-Z][0-9][A-Z] [0-9][A-Z][0-9]",
        },
      },
    },
    "if": {
      "properties": {
        "country": {
          "const": "United States of America",
        },
      },
    },
    "properties": {
      "country": {
        "default": "United States of America",
        "enum": [
          "United States of America",
          "Canada",
        ],
      },
    },
    "then": {
      "properties": {
        "postal_code": {
          "pattern": "[0-9]{5}(-[0-9]{4})?",
        },
      },
    },
    "type": "object",
  },
}
`;

exports[`schemaParser() parses schema with multiple conditions 1`] = `
{
  "-269ce7ef": {
    "$id": "-269ce7ef",
    "properties": {
      "Animal": {
        "const": "Dog",
      },
    },
    "required": [
      "Animal",
    ],
  },
  "-5e82ba72": {
    "$id": "-5e82ba72",
    "properties": {
      "BreedName": {
        "const": "Dalmation",
      },
    },
    "required": [
      "BreedName",
    ],
  },
  "-61d82723": {
    "$id": "-61d82723",
    "allOf": [
      {
        "if": {
          "properties": {
            "Animal": {
              "const": "Cat",
            },
          },
          "required": [
            "Animal",
          ],
        },
        "then": {
          "properties": {
            "Tail": {
              "default": "Long",
              "enum": [
                "Long",
                "Short",
                "None",
              ],
              "title": "Tail length",
              "type": "string",
            },
          },
          "required": [
            "Tail",
          ],
        },
      },
      {
        "if": {
          "properties": {
            "Animal": {
              "const": "Dog",
            },
          },
          "required": [
            "Animal",
          ],
        },
        "then": {
          "properties": {
            "Breed": {
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "BreedName": {
                        "const": "Alsatian",
                      },
                    },
                    "required": [
                      "BreedName",
                    ],
                  },
                  "then": {
                    "properties": {
                      "Fur": {
                        "default": "brown",
                        "enum": [
                          "black",
                          "brown",
                        ],
                        "title": "Fur",
                        "type": "string",
                      },
                    },
                    "required": [
                      "Fur",
                    ],
                  },
                },
                {
                  "if": {
                    "properties": {
                      "BreedName": {
                        "const": "Dalmation",
                      },
                    },
                    "required": [
                      "BreedName",
                    ],
                  },
                  "then": {
                    "properties": {
                      "Spots": {
                        "default": "small",
                        "enum": [
                          "large",
                          "small",
                        ],
                        "title": "Spots",
                        "type": "string",
                      },
                    },
                    "required": [
                      "Spots",
                    ],
                  },
                },
              ],
              "properties": {
                "BreedName": {
                  "default": "Alsatian",
                  "enum": [
                    "Alsatian",
                    "Dalmation",
                  ],
                  "title": "Breed name",
                  "type": "string",
                },
              },
              "required": [
                "BreedName",
              ],
              "title": "Breed",
            },
          },
        },
      },
    ],
    "properties": {
      "Animal": {
        "default": "Cat",
        "enum": [
          "Cat",
          "Dog",
        ],
        "title": "Animal",
        "type": "string",
      },
    },
    "required": [
      "Animal",
    ],
    "type": "object",
  },
  "-7b9d5dae": {
    "$id": "-7b9d5dae",
    "properties": {
      "BreedName": {
        "const": "Alsatian",
      },
    },
    "required": [
      "BreedName",
    ],
  },
  "6dc2a62b": {
    "$id": "6dc2a62b",
    "properties": {
      "Animal": {
        "const": "Cat",
      },
    },
    "required": [
      "Animal",
    ],
  },
}
`;

exports[`schemaParser() parses schema with nested conditions 1`] = `
{
  "-f42a226": {
    "$id": "-f42a226",
    "properties": {
      "state": {
        "const": "New York",
      },
    },
    "required": [
      "state",
    ],
  },
  "14f43ce2": {
    "$id": "14f43ce2",
    "properties": {
      "country": {
        "const": "USA",
      },
    },
    "required": [
      "country",
    ],
  },
  "5ad8e931": {
    "$id": "5ad8e931",
    "properties": {
      "state": {
        "const": "California",
      },
    },
    "required": [
      "state",
    ],
  },
  "767ff7c6": {
    "$id": "767ff7c6",
    "if": {
      "properties": {
        "country": {
          "const": "USA",
        },
      },
      "required": [
        "country",
      ],
    },
    "properties": {
      "country": {
        "enum": [
          "USA",
        ],
      },
    },
    "required": [
      "country",
    ],
    "then": {
      "else": {
        "if": {
          "properties": {
            "state": {
              "const": "California",
            },
          },
          "required": [
            "state",
          ],
        },
        "then": {
          "properties": {
            "city": {
              "enum": [
                "Los Angeles",
                "San Diego",
                "San Jose",
              ],
              "type": "string",
            },
          },
        },
      },
      "if": {
        "properties": {
          "state": {
            "const": "New York",
          },
        },
        "required": [
          "state",
        ],
      },
      "properties": {
        "state": {
          "enum": [
            "California",
            "New York",
          ],
          "type": "string",
        },
      },
      "required": [
        "state",
      ],
      "then": {
        "properties": {
          "city": {
            "enum": [
              "New York City",
              "Buffalo",
              "Rochester",
            ],
            "type": "string",
          },
        },
      },
    },
    "type": "object",
  },
}
`;

exports[`schemaParser() parses schema with oneof and nested dependencies 1`] = `
{
  "-37c29d49": {
    "$id": "-37c29d49",
    "properties": {
      "update_absences": {
        "const": "NON_MEDICAL_ONLY",
      },
    },
    "type": "object",
  },
  "-406a5a54": {
    "$id": "-406a5a54",
    "dependencies": {
      "employee_accounts": {
        "oneOf": [
          {
            "properties": {
              "employee_accounts": {
                "const": true,
              },
              "update_absences": {
                "oneOf": [
                  {
                    "const": "BOTH",
                    "title": "Both",
                  },
                ],
                "title": "Update Absences",
                "type": "string",
              },
            },
          },
        ],
      },
      "update_absences": {
        "oneOf": [
          {
            "properties": {
              "permitted_extension": {
                "title": "Permitted Extension",
                "type": "integer",
              },
              "update_absences": {
                "const": "BOTH",
              },
            },
          },
          {
            "properties": {
              "permitted_extension": {
                "title": "Permitted Extension",
                "type": "integer",
              },
              "update_absences": {
                "const": "MEDICAL_ONLY",
              },
            },
          },
          {
            "properties": {
              "permitted_extension": {
                "title": "Permitted Extension",
                "type": "integer",
              },
              "update_absences": {
                "const": "NON_MEDICAL_ONLY",
              },
            },
          },
        ],
      },
    },
    "properties": {
      "employee_accounts": {
        "title": "Employee Accounts",
        "type": "boolean",
      },
    },
    "type": "object",
  },
  "-7a6dd81b": {
    "$id": "-7a6dd81b",
    "properties": {
      "update_absences": {
        "const": "MEDICAL_ONLY",
      },
    },
    "type": "object",
  },
  "-7c3c9229": {
    "$id": "-7c3c9229",
    "const": "BOTH",
    "title": "Both",
  },
  "3a28e528": {
    "$id": "3a28e528",
    "properties": {
      "employee_accounts": {
        "const": true,
      },
    },
    "type": "object",
  },
  "934b22c": {
    "$id": "934b22c",
    "properties": {
      "update_absences": {
        "const": "BOTH",
      },
    },
    "type": "object",
  },
}
`;

exports[`schemaParser() parses superSchema properly 1`] = `
{
  "-130bae51": {
    "$id": "-130bae51",
    "anyOf": [
      {
        "required": [
          "name",
        ],
      },
    ],
    "properties": {
      "name": {
        "type": "string",
      },
    },
    "type": "object",
  },
  "-1e3c57ec": {
    "$id": "-1e3c57ec",
    "anyOf": [
      {
        "required": [
          "choice",
        ],
      },
      {
        "required": [
          "more",
        ],
      },
    ],
    "properties": {
      "choice": {
        "const": "two",
        "type": "string",
      },
      "more": {
        "type": "string",
      },
    },
    "type": "object",
  },
  "-42566fe2": {
    "$id": "-42566fe2",
    "anyOf": [
      {
        "required": [
          "choice",
        ],
      },
      {
        "required": [
          "other",
        ],
      },
    ],
    "properties": {
      "choice": {
        "const": "one",
        "type": "string",
      },
      "other": {
        "type": "number",
      },
    },
    "type": "object",
  },
  "-7df52035": {
    "$id": "-7df52035",
    "anyOf": [
      {
        "required": [
          "firstName",
        ],
      },
      {
        "required": [
          "lastName",
        ],
      },
    ],
    "properties": {
      "firstName": {
        "title": "First name",
        "type": "string",
      },
      "lastName": {
        "type": "string",
      },
    },
    "title": "First method of identification",
  },
  "587c7f18": {
    "$id": "587c7f18",
    "anyOf": [
      {
        "required": [
          "idCode",
        ],
      },
    ],
    "properties": {
      "idCode": {
        "type": "string",
      },
    },
    "title": "Second method of identification",
  },
  "super-schema": {
    "$id": "super-schema",
    "anyOf": [
      {
        "properties": {
          "firstName": {
            "title": "First name",
            "type": "string",
          },
          "lastName": {
            "$ref": "#/definitions/test",
          },
        },
        "title": "First method of identification",
      },
      {
        "properties": {
          "idCode": {
            "$ref": "#/definitions/test",
          },
        },
        "title": "Second method of identification",
      },
    ],
    "definitions": {
      "choice1": {
        "properties": {
          "choice": {
            "const": "one",
            "type": "string",
          },
          "other": {
            "type": "number",
          },
        },
        "required": [
          "more",
        ],
        "type": "object",
      },
      "choice2": {
        "properties": {
          "choice": {
            "const": "two",
            "type": "string",
          },
          "more": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "foo": {
        "properties": {
          "name": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "list": {
        "items": {
          "type": "string",
        },
        "type": "array",
      },
      "passwords": {
        "properties": {
          "pass1": {
            "type": "string",
          },
          "pass2": {
            "type": "string",
          },
        },
        "required": [
          "pass1",
          "pass2",
        ],
        "type": "object",
      },
      "price": {
        "minimum": 0,
        "multipleOf": 0.03,
        "title": "Price per task ($)",
        "type": "number",
      },
      "test": {
        "type": "string",
      },
    },
    "properties": {
      "anything": {
        "additionalProperties": {
          "type": "string",
        },
        "type": "object",
      },
      "dataUrlWithName": {
        "format": "data-url",
        "type": "string",
      },
      "foo": {
        "type": "string",
      },
      "list": {
        "$ref": "#/definitions/list",
      },
      "multi": {
        "anyOf": [
          {
            "$ref": "#/definitions/foo",
          },
        ],
        "title": "multi",
      },
      "passwords": {
        "$ref": "#/definitions/passwords",
      },
      "price": {
        "$ref": "#/definitions/price",
      },
      "single": {
        "oneOf": [
          {
            "$ref": "#/definitions/choice1",
          },
          {
            "$ref": "#/definitions/choice2",
          },
        ],
        "required": [
          "choice",
        ],
      },
    },
    "type": "object",
  },
}
`;
